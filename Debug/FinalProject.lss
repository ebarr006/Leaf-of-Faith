
FinalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002a2  00800100  00001d90  00001e24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d90  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002a  008003a2  008003a2  000020c6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000020c6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000020f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000228  00000000  00000000  00002138  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000027af  00000000  00000000  00002360  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c55  00000000  00000000  00004b0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001abd  00000000  00000000  00005764  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000418  00000000  00000000  00007224  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000934  00000000  00000000  0000763c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000019fe  00000000  00000000  00007f70  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  0000996e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b9 c0       	rjmp	.+370    	; 0x174 <__ctors_end>
       2:	00 00       	nop
       4:	d6 c0       	rjmp	.+428    	; 0x1b2 <__bad_interrupt>
       6:	00 00       	nop
       8:	d4 c0       	rjmp	.+424    	; 0x1b2 <__bad_interrupt>
       a:	00 00       	nop
       c:	d2 c0       	rjmp	.+420    	; 0x1b2 <__bad_interrupt>
       e:	00 00       	nop
      10:	d0 c0       	rjmp	.+416    	; 0x1b2 <__bad_interrupt>
      12:	00 00       	nop
      14:	ce c0       	rjmp	.+412    	; 0x1b2 <__bad_interrupt>
      16:	00 00       	nop
      18:	cc c0       	rjmp	.+408    	; 0x1b2 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	ca c0       	rjmp	.+404    	; 0x1b2 <__bad_interrupt>
      1e:	00 00       	nop
      20:	c8 c0       	rjmp	.+400    	; 0x1b2 <__bad_interrupt>
      22:	00 00       	nop
      24:	c6 c0       	rjmp	.+396    	; 0x1b2 <__bad_interrupt>
      26:	00 00       	nop
      28:	c4 c0       	rjmp	.+392    	; 0x1b2 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	c2 c0       	rjmp	.+388    	; 0x1b2 <__bad_interrupt>
      2e:	00 00       	nop
      30:	c0 c0       	rjmp	.+384    	; 0x1b2 <__bad_interrupt>
      32:	00 00       	nop
      34:	9c c2       	rjmp	.+1336   	; 0x56e <__vector_13>
      36:	00 00       	nop
      38:	bc c0       	rjmp	.+376    	; 0x1b2 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	ba c0       	rjmp	.+372    	; 0x1b2 <__bad_interrupt>
      3e:	00 00       	nop
      40:	b8 c0       	rjmp	.+368    	; 0x1b2 <__bad_interrupt>
      42:	00 00       	nop
      44:	b6 c0       	rjmp	.+364    	; 0x1b2 <__bad_interrupt>
      46:	00 00       	nop
      48:	b4 c0       	rjmp	.+360    	; 0x1b2 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ca c1       	rjmp	.+916    	; 0x3e2 <__vector_19>
      4e:	00 00       	nop
      50:	b0 c0       	rjmp	.+352    	; 0x1b2 <__bad_interrupt>
      52:	00 00       	nop
      54:	ae c0       	rjmp	.+348    	; 0x1b2 <__bad_interrupt>
      56:	00 00       	nop
      58:	ac c0       	rjmp	.+344    	; 0x1b2 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	aa c0       	rjmp	.+340    	; 0x1b2 <__bad_interrupt>
      5e:	00 00       	nop
      60:	a8 c0       	rjmp	.+336    	; 0x1b2 <__bad_interrupt>
      62:	00 00       	nop
      64:	a6 c0       	rjmp	.+332    	; 0x1b2 <__bad_interrupt>
      66:	00 00       	nop
      68:	a4 c0       	rjmp	.+328    	; 0x1b2 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	a2 c0       	rjmp	.+324    	; 0x1b2 <__bad_interrupt>
      6e:	00 00       	nop
      70:	a0 c0       	rjmp	.+320    	; 0x1b2 <__bad_interrupt>
      72:	00 00       	nop
      74:	9e c0       	rjmp	.+316    	; 0x1b2 <__bad_interrupt>
      76:	00 00       	nop
      78:	9c c0       	rjmp	.+312    	; 0x1b2 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	9a c0       	rjmp	.+308    	; 0x1b2 <__bad_interrupt>
      7e:	00 00       	nop
      80:	98 c0       	rjmp	.+304    	; 0x1b2 <__bad_interrupt>
      82:	00 00       	nop
      84:	96 c0       	rjmp	.+300    	; 0x1b2 <__bad_interrupt>
      86:	00 00       	nop
      88:	94 c0       	rjmp	.+296    	; 0x1b2 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	ad 04       	cpc	r10, r13
      8e:	12 05       	cpc	r17, r2
      90:	b9 04       	cpc	r11, r9
      92:	2f 05       	cpc	r18, r15
      94:	95 05       	cpc	r25, r5
      96:	f2 05       	cpc	r31, r2
      98:	07 06       	cpc	r0, r23
      9a:	1c 06       	cpc	r1, r28
      9c:	31 06       	cpc	r3, r17
      9e:	54 06       	cpc	r5, r20
      a0:	7d 06       	cpc	r7, r29
      a2:	a3 06       	cpc	r10, r19
      a4:	d0 06       	cpc	r13, r16
      a6:	9f 07       	cpc	r25, r31
      a8:	ce 07       	cpc	r28, r30
      aa:	fb 07       	cpc	r31, r27
      ac:	22 08       	sbc	r2, r2
      ae:	49 08       	sbc	r4, r9
      b0:	70 08       	sbc	r7, r0
      b2:	96 08       	sbc	r9, r6
      b4:	c0 08       	sbc	r12, r0
      b6:	ca 06       	cpc	r12, r26
      b8:	cd 06       	cpc	r12, r29
      ba:	d3 06       	cpc	r13, r19
      bc:	c6 08       	sbc	r12, r6
      be:	03 07       	cpc	r16, r19
      c0:	2a 07       	cpc	r18, r26
      c2:	51 07       	cpc	r21, r17
      c4:	78 07       	cpc	r23, r24
      c6:	d6 08       	sbc	r13, r6
      c8:	f2 08       	sbc	r15, r2
      ca:	dd 08       	sbc	r13, r13
      cc:	0a 09       	sbc	r16, r10
      ce:	20 09       	sbc	r18, r0
      d0:	37 09       	sbc	r19, r7
      d2:	58 09       	sbc	r21, r8
      d4:	6f 09       	sbc	r22, r15
      d6:	88 09       	sbc	r24, r8
      d8:	90 09       	sbc	r25, r0
      da:	a7 09       	sbc	r26, r7
      dc:	af 09       	sbc	r26, r15
      de:	4d 0c       	add	r4, r13
      e0:	58 0a       	sbc	r5, r24
      e2:	98 0a       	sbc	r9, r24
      e4:	df 0a       	sbc	r13, r31
      e6:	e7 0a       	sbc	r14, r23
      e8:	fe 0a       	sbc	r15, r30
      ea:	06 0b       	sbc	r16, r22
      ec:	1d 0b       	sbc	r17, r29
      ee:	d4 08       	sbc	r13, r4
      f0:	d2 08       	sbc	r13, r2
      f2:	d0 08       	sbc	r13, r0
      f4:	c6 09       	sbc	r28, r6
      f6:	e9 09       	sbc	r30, r9
      f8:	0b 0a       	sbc	r0, r27
      fa:	26 0a       	sbc	r2, r22
      fc:	3c 0a       	sbc	r3, r28
      fe:	4a 0a       	sbc	r4, r26
     100:	d6 08       	sbc	r13, r6
     102:	f2 08       	sbc	r15, r2
     104:	dd 08       	sbc	r13, r13
     106:	0a 09       	sbc	r16, r10
     108:	2c 09       	sbc	r18, r12
     10a:	37 09       	sbc	r19, r7
     10c:	58 09       	sbc	r21, r8
     10e:	6f 09       	sbc	r22, r15
     110:	88 09       	sbc	r24, r8
     112:	90 09       	sbc	r25, r0
     114:	a7 09       	sbc	r26, r7
     116:	af 09       	sbc	r26, r15
     118:	4d 0c       	add	r4, r13
     11a:	58 0a       	sbc	r5, r24
     11c:	98 0a       	sbc	r9, r24
     11e:	df 0a       	sbc	r13, r31
     120:	e7 0a       	sbc	r14, r23
     122:	fe 0a       	sbc	r15, r30
     124:	06 0b       	sbc	r16, r22
     126:	1d 0b       	sbc	r17, r29
     128:	d4 08       	sbc	r13, r4
     12a:	d2 08       	sbc	r13, r2
     12c:	d0 08       	sbc	r13, r0
     12e:	c6 09       	sbc	r28, r6
     130:	e9 09       	sbc	r30, r9
     132:	0b 0a       	sbc	r0, r27
     134:	26 0a       	sbc	r2, r22
     136:	3c 0a       	sbc	r3, r28
     138:	4a 0a       	sbc	r4, r26
     13a:	d6 08       	sbc	r13, r6
     13c:	f2 08       	sbc	r15, r2
     13e:	4d 0c       	add	r4, r13
     140:	0a 09       	sbc	r16, r10
     142:	20 09       	sbc	r18, r0
     144:	37 09       	sbc	r19, r7
     146:	58 09       	sbc	r21, r8
     148:	6f 09       	sbc	r22, r15
     14a:	88 09       	sbc	r24, r8
     14c:	90 09       	sbc	r25, r0
     14e:	a7 09       	sbc	r26, r7
     150:	af 09       	sbc	r26, r15
     152:	4d 0c       	add	r4, r13
     154:	58 0a       	sbc	r5, r24
     156:	98 0a       	sbc	r9, r24
     158:	df 0a       	sbc	r13, r31
     15a:	e7 0a       	sbc	r14, r23
     15c:	fe 0a       	sbc	r15, r30
     15e:	06 0b       	sbc	r16, r22
     160:	1d 0b       	sbc	r17, r29
     162:	d4 08       	sbc	r13, r4
     164:	d2 08       	sbc	r13, r2
     166:	d0 08       	sbc	r13, r0
     168:	c6 09       	sbc	r28, r6
     16a:	e9 09       	sbc	r30, r9
     16c:	0b 0a       	sbc	r0, r27
     16e:	26 0a       	sbc	r2, r22
     170:	3c 0a       	sbc	r3, r28
     172:	4a 0a       	sbc	r4, r26

00000174 <__ctors_end>:
     174:	11 24       	eor	r1, r1
     176:	1f be       	out	0x3f, r1	; 63
     178:	cf ef       	ldi	r28, 0xFF	; 255
     17a:	d0 e4       	ldi	r29, 0x40	; 64
     17c:	de bf       	out	0x3e, r29	; 62
     17e:	cd bf       	out	0x3d, r28	; 61

00000180 <__do_copy_data>:
     180:	13 e0       	ldi	r17, 0x03	; 3
     182:	a0 e0       	ldi	r26, 0x00	; 0
     184:	b1 e0       	ldi	r27, 0x01	; 1
     186:	e0 e9       	ldi	r30, 0x90	; 144
     188:	fd e1       	ldi	r31, 0x1D	; 29
     18a:	00 e0       	ldi	r16, 0x00	; 0
     18c:	0b bf       	out	0x3b, r16	; 59
     18e:	02 c0       	rjmp	.+4      	; 0x194 <__do_copy_data+0x14>
     190:	07 90       	elpm	r0, Z+
     192:	0d 92       	st	X+, r0
     194:	a2 3a       	cpi	r26, 0xA2	; 162
     196:	b1 07       	cpc	r27, r17
     198:	d9 f7       	brne	.-10     	; 0x190 <__do_copy_data+0x10>

0000019a <__do_clear_bss>:
     19a:	23 e0       	ldi	r18, 0x03	; 3
     19c:	a2 ea       	ldi	r26, 0xA2	; 162
     19e:	b3 e0       	ldi	r27, 0x03	; 3
     1a0:	01 c0       	rjmp	.+2      	; 0x1a4 <.do_clear_bss_start>

000001a2 <.do_clear_bss_loop>:
     1a2:	1d 92       	st	X+, r1

000001a4 <.do_clear_bss_start>:
     1a4:	ac 3c       	cpi	r26, 0xCC	; 204
     1a6:	b2 07       	cpc	r27, r18
     1a8:	e1 f7       	brne	.-8      	; 0x1a2 <.do_clear_bss_loop>
     1aa:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <main>
     1ae:	0c 94 c6 0e 	jmp	0x1d8c	; 0x1d8c <_exit>

000001b2 <__bad_interrupt>:
     1b2:	26 cf       	rjmp	.-436    	; 0x0 <__vectors>

000001b4 <delay_ms>:

void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
     1b4:	18 16       	cp	r1, r24
     1b6:	19 06       	cpc	r1, r25
     1b8:	5c f0       	brlt	.+22     	; 0x1d0 <delay_ms+0x1c>
     1ba:	08 95       	ret
    for(j=0;j<775;j++)
  {
   asm("nop");
     1bc:	00 00       	nop
     1be:	21 50       	subi	r18, 0x01	; 1
     1c0:	31 09       	sbc	r19, r1
void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
    for(j=0;j<775;j++)
     1c2:	e1 f7       	brne	.-8      	; 0x1bc <delay_ms+0x8>

void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
     1c4:	4f 5f       	subi	r20, 0xFF	; 255
     1c6:	5f 4f       	sbci	r21, 0xFF	; 255
     1c8:	84 17       	cp	r24, r20
     1ca:	95 07       	cpc	r25, r21
     1cc:	19 f4       	brne	.+6      	; 0x1d4 <delay_ms+0x20>
     1ce:	08 95       	ret
     1d0:	40 e0       	ldi	r20, 0x00	; 0
     1d2:	50 e0       	ldi	r21, 0x00	; 0
   }
}

void delay_ms(int miliSec) //for 8 Mhz crystal

{
     1d4:	27 e0       	ldi	r18, 0x07	; 7
     1d6:	33 e0       	ldi	r19, 0x03	; 3
     1d8:	f1 cf       	rjmp	.-30     	; 0x1bc <delay_ms+0x8>

000001da <LCD_WriteCommand>:
	LCD_WriteCommand(0x01);
	delay_ms(10);						 
}

void LCD_WriteCommand (unsigned char Command) {
   CLR_BIT(CONTROL_BUS,RS);
     1da:	5e 98       	cbi	0x0b, 6	; 11
   DATA_BUS = Command;
     1dc:	88 b9       	out	0x08, r24	; 8
   SET_BIT(CONTROL_BUS,E);
     1de:	5f 9a       	sbi	0x0b, 7	; 11
   asm("nop");
     1e0:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
     1e2:	5f 98       	cbi	0x0b, 7	; 11
   delay_ms(2); // ClearScreen requires 1.52ms to execute
     1e4:	82 e0       	ldi	r24, 0x02	; 2
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	e5 cf       	rjmp	.-54     	; 0x1b4 <delay_ms>
     1ea:	08 95       	ret

000001ec <LCD_ClearScreen>:
#define E 7

/*-------------------------------------------------------------------------*/

void LCD_ClearScreen(void) {
   LCD_WriteCommand(0x01);
     1ec:	81 e0       	ldi	r24, 0x01	; 1
     1ee:	f5 cf       	rjmp	.-22     	; 0x1da <LCD_WriteCommand>
     1f0:	08 95       	ret

000001f2 <LCD_Cursor>:
      LCD_WriteData(*string++);
   }
}

void LCD_Cursor(unsigned char column) {
   if ( column < 17 ) { // 16x1 LCD: column < 9
     1f2:	81 31       	cpi	r24, 0x11	; 17
     1f4:	18 f4       	brcc	.+6      	; 0x1fc <LCD_Cursor+0xa>
						// 16x2 LCD: column < 17
      LCD_WriteCommand(0x80 + column - 1);
     1f6:	81 58       	subi	r24, 0x81	; 129
     1f8:	f0 cf       	rjmp	.-32     	; 0x1da <LCD_WriteCommand>
     1fa:	08 95       	ret
   } else {
      LCD_WriteCommand(0xB8 + column - 9);	// 16x1 LCD: column - 1
     1fc:	81 55       	subi	r24, 0x51	; 81
     1fe:	ed cf       	rjmp	.-38     	; 0x1da <LCD_WriteCommand>
     200:	08 95       	ret

00000202 <LCD_init>:
}

void LCD_init(void) {

    //wait for 100 ms.
	delay_ms(100);
     202:	84 e6       	ldi	r24, 0x64	; 100
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	d6 df       	rcall	.-84     	; 0x1b4 <delay_ms>
	LCD_WriteCommand(0x38);
     208:	88 e3       	ldi	r24, 0x38	; 56
     20a:	e7 df       	rcall	.-50     	; 0x1da <LCD_WriteCommand>
	LCD_WriteCommand(0x06);
     20c:	86 e0       	ldi	r24, 0x06	; 6
     20e:	e5 df       	rcall	.-54     	; 0x1da <LCD_WriteCommand>
	LCD_WriteCommand(0x0f);
     210:	8f e0       	ldi	r24, 0x0F	; 15
     212:	e3 df       	rcall	.-58     	; 0x1da <LCD_WriteCommand>
	LCD_WriteCommand(0x01);
     214:	81 e0       	ldi	r24, 0x01	; 1
     216:	e1 df       	rcall	.-62     	; 0x1da <LCD_WriteCommand>
	delay_ms(10);						 
     218:	8a e0       	ldi	r24, 0x0A	; 10
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	cb cf       	rjmp	.-106    	; 0x1b4 <delay_ms>
     21e:	08 95       	ret

00000220 <LCD_WriteData>:
     220:	5e 9a       	sbi	0x0b, 6	; 11
   delay_ms(2); // ClearScreen requires 1.52ms to execute
}

void LCD_WriteData(unsigned char Data) {
   SET_BIT(CONTROL_BUS,RS);
   DATA_BUS = Data;
     222:	88 b9       	out	0x08, r24	; 8
   SET_BIT(CONTROL_BUS,E);
     224:	5f 9a       	sbi	0x0b, 7	; 11
   asm("nop");
     226:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
     228:	5f 98       	cbi	0x0b, 7	; 11
   delay_ms(1);
     22a:	81 e0       	ldi	r24, 0x01	; 1
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	c2 cf       	rjmp	.-124    	; 0x1b4 <delay_ms>
     230:	08 95       	ret

00000232 <LCD_DisplayString>:
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
     232:	1f 93       	push	r17
     234:	cf 93       	push	r28
     236:	df 93       	push	r29
   // LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
     238:	fb 01       	movw	r30, r22
     23a:	90 81       	ld	r25, Z
     23c:	99 23       	and	r25, r25
     23e:	51 f0       	breq	.+20     	; 0x254 <LCD_DisplayString+0x22>
     240:	eb 01       	movw	r28, r22
      LCD_Cursor(c++);
     242:	11 e0       	ldi	r17, 0x01	; 1
     244:	18 0f       	add	r17, r24
     246:	d5 df       	rcall	.-86     	; 0x1f2 <LCD_Cursor>
      LCD_WriteData(*string++);
     248:	89 91       	ld	r24, Y+
     24a:	ea df       	rcall	.-44     	; 0x220 <LCD_WriteData>

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   // LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
      LCD_Cursor(c++);
     24c:	81 2f       	mov	r24, r17
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   // LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
     24e:	98 81       	ld	r25, Y
     250:	91 11       	cpse	r25, r1
     252:	f7 cf       	rjmp	.-18     	; 0x242 <LCD_DisplayString+0x10>
      LCD_Cursor(c++);
      LCD_WriteData(*string++);
   }
}
     254:	df 91       	pop	r29
     256:	cf 91       	pop	r28
     258:	1f 91       	pop	r17
     25a:	08 95       	ret

0000025c <hourGlass>:

double scaler(double x, double input_min, double input_max, double output_min, double output_max) {
	double slope = 1.0 * (output_max - output_min) / (input_max - input_min);
	double output = output_min + rounder(slope * (x - input_min));
	return (unsigned short)output;
}
     25c:	80 91 bf 03 	lds	r24, 0x03BF	; 0x8003bf <elon_musk>
     260:	81 30       	cpi	r24, 0x01	; 1
     262:	09 f4       	brne	.+2      	; 0x266 <hourGlass+0xa>
     264:	4d c0       	rjmp	.+154    	; 0x300 <hourGlass+0xa4>
     266:	20 f0       	brcs	.+8      	; 0x270 <hourGlass+0x14>
     268:	82 30       	cpi	r24, 0x02	; 2
     26a:	09 f4       	brne	.+2      	; 0x26e <hourGlass+0x12>
     26c:	4d c0       	rjmp	.+154    	; 0x308 <hourGlass+0xac>
     26e:	4f c0       	rjmp	.+158    	; 0x30e <hourGlass+0xb2>
     270:	90 91 ba 03 	lds	r25, 0x03BA	; 0x8003ba <plant1+0x1>
     274:	80 91 b4 03 	lds	r24, 0x03B4	; 0x8003b4 <frequency>
     278:	98 17       	cp	r25, r24
     27a:	21 f0       	breq	.+8      	; 0x284 <hourGlass+0x28>
     27c:	59 98       	cbi	0x0b, 1	; 11
     27e:	82 e0       	ldi	r24, 0x02	; 2
     280:	80 93 bf 03 	sts	0x03BF, r24	; 0x8003bf <elon_musk>
     284:	80 91 b4 03 	lds	r24, 0x03B4	; 0x8003b4 <frequency>
     288:	83 36       	cpi	r24, 0x63	; 99
     28a:	c1 f4       	brne	.+48     	; 0x2bc <hourGlass+0x60>
     28c:	90 91 c4 03 	lds	r25, 0x03C4	; 0x8003c4 <min>
     290:	91 30       	cpi	r25, 0x01	; 1
     292:	a1 f4       	brne	.+40     	; 0x2bc <hourGlass+0x60>
     294:	90 91 b9 03 	lds	r25, 0x03B9	; 0x8003b9 <plant1>
     298:	91 30       	cpi	r25, 0x01	; 1
     29a:	09 f4       	brne	.+2      	; 0x29e <hourGlass+0x42>
     29c:	8b c0       	rjmp	.+278    	; 0x3b4 <hourGlass+0x158>
     29e:	91 11       	cpse	r25, r1
     2a0:	47 c0       	rjmp	.+142    	; 0x330 <hourGlass+0xd4>
     2a2:	40 91 bd 03 	lds	r20, 0x03BD	; 0x8003bd <plant1+0x4>
     2a6:	50 91 be 03 	lds	r21, 0x03BE	; 0x8003be <plant1+0x5>
     2aa:	20 91 ca 03 	lds	r18, 0x03CA	; 0x8003ca <SUN_reading>
     2ae:	30 91 cb 03 	lds	r19, 0x03CB	; 0x8003cb <SUN_reading+0x1>
     2b2:	24 17       	cp	r18, r20
     2b4:	35 07       	cpc	r19, r21
     2b6:	08 f4       	brcc	.+2      	; 0x2ba <hourGlass+0x5e>
     2b8:	71 c0       	rjmp	.+226    	; 0x39c <hourGlass+0x140>
     2ba:	3a c0       	rjmp	.+116    	; 0x330 <hourGlass+0xd4>
     2bc:	90 91 b9 03 	lds	r25, 0x03B9	; 0x8003b9 <plant1>
     2c0:	91 11       	cpse	r25, r1
     2c2:	36 c0       	rjmp	.+108    	; 0x330 <hourGlass+0xd4>
     2c4:	40 91 bd 03 	lds	r20, 0x03BD	; 0x8003bd <plant1+0x4>
     2c8:	50 91 be 03 	lds	r21, 0x03BE	; 0x8003be <plant1+0x5>
     2cc:	20 91 ca 03 	lds	r18, 0x03CA	; 0x8003ca <SUN_reading>
     2d0:	30 91 cb 03 	lds	r19, 0x03CB	; 0x8003cb <SUN_reading+0x1>
     2d4:	24 17       	cp	r18, r20
     2d6:	35 07       	cpc	r19, r21
     2d8:	58 f5       	brcc	.+86     	; 0x330 <hourGlass+0xd4>
     2da:	90 91 c7 03 	lds	r25, 0x03C7	; 0x8003c7 <day>
     2de:	98 17       	cp	r25, r24
     2e0:	38 f1       	brcs	.+78     	; 0x330 <hourGlass+0xd4>
     2e2:	20 91 bb 03 	lds	r18, 0x03BB	; 0x8003bb <plant1+0x2>
     2e6:	30 91 bc 03 	lds	r19, 0x03BC	; 0x8003bc <plant1+0x3>
     2ea:	80 91 c8 03 	lds	r24, 0x03C8	; 0x8003c8 <MS_reading>
     2ee:	90 91 c9 03 	lds	r25, 0x03C9	; 0x8003c9 <MS_reading+0x1>
     2f2:	82 17       	cp	r24, r18
     2f4:	93 07       	cpc	r25, r19
     2f6:	e0 f4       	brcc	.+56     	; 0x330 <hourGlass+0xd4>
     2f8:	81 e0       	ldi	r24, 0x01	; 1
     2fa:	80 93 bf 03 	sts	0x03BF, r24	; 0x8003bf <elon_musk>
     2fe:	3e c0       	rjmp	.+124    	; 0x37c <hourGlass+0x120>
     300:	82 e0       	ldi	r24, 0x02	; 2
     302:	80 93 bf 03 	sts	0x03BF, r24	; 0x8003bf <elon_musk>
     306:	3c c0       	rjmp	.+120    	; 0x380 <hourGlass+0x124>
     308:	10 92 bf 03 	sts	0x03BF, r1	; 0x8003bf <elon_musk>
     30c:	1a c0       	rjmp	.+52     	; 0x342 <hourGlass+0xe6>
     30e:	10 92 c7 03 	sts	0x03C7, r1	; 0x8003c7 <day>
     312:	10 92 c4 03 	sts	0x03C4, r1	; 0x8003c4 <min>
     316:	10 92 b0 03 	sts	0x03B0, r1	; 0x8003b0 <half>
     31a:	10 92 c6 03 	sts	0x03C6, r1	; 0x8003c6 <sec>
     31e:	10 92 b1 03 	sts	0x03B1, r1	; 0x8003b1 <t>
     322:	80 91 ba 03 	lds	r24, 0x03BA	; 0x8003ba <plant1+0x1>
     326:	80 93 b4 03 	sts	0x03B4, r24	; 0x8003b4 <frequency>
     32a:	10 92 bf 03 	sts	0x03BF, r1	; 0x8003bf <elon_musk>
     32e:	15 c0       	rjmp	.+42     	; 0x35a <hourGlass+0xfe>
     330:	80 91 bf 03 	lds	r24, 0x03BF	; 0x8003bf <elon_musk>
     334:	81 30       	cpi	r24, 0x01	; 1
     336:	11 f1       	breq	.+68     	; 0x37c <hourGlass+0x120>
     338:	20 f0       	brcs	.+8      	; 0x342 <hourGlass+0xe6>
     33a:	82 30       	cpi	r24, 0x02	; 2
     33c:	09 f0       	breq	.+2      	; 0x340 <hourGlass+0xe4>
     33e:	4e c0       	rjmp	.+156    	; 0x3dc <hourGlass+0x180>
     340:	1f c0       	rjmp	.+62     	; 0x380 <hourGlass+0x124>
     342:	80 91 b1 03 	lds	r24, 0x03B1	; 0x8003b1 <t>
     346:	8a 30       	cpi	r24, 0x0A	; 10
     348:	40 f0       	brcs	.+16     	; 0x35a <hourGlass+0xfe>
     34a:	10 92 b1 03 	sts	0x03B1, r1	; 0x8003b1 <t>
     34e:	80 91 c6 03 	lds	r24, 0x03C6	; 0x8003c6 <sec>
     352:	8f 5f       	subi	r24, 0xFF	; 255
     354:	80 93 c6 03 	sts	0x03C6, r24	; 0x8003c6 <sec>
     358:	0b c0       	rjmp	.+22     	; 0x370 <hourGlass+0x114>
     35a:	80 91 c6 03 	lds	r24, 0x03C6	; 0x8003c6 <sec>
     35e:	83 33       	cpi	r24, 0x33	; 51
     360:	38 f0       	brcs	.+14     	; 0x370 <hourGlass+0x114>
     362:	10 92 c6 03 	sts	0x03C6, r1	; 0x8003c6 <sec>
     366:	80 91 c4 03 	lds	r24, 0x03C4	; 0x8003c4 <min>
     36a:	8f 5f       	subi	r24, 0xFF	; 255
     36c:	80 93 c4 03 	sts	0x03C4, r24	; 0x8003c4 <min>
     370:	80 91 b1 03 	lds	r24, 0x03B1	; 0x8003b1 <t>
     374:	8f 5f       	subi	r24, 0xFF	; 255
     376:	80 93 b1 03 	sts	0x03B1, r24	; 0x8003b1 <t>
     37a:	30 c0       	rjmp	.+96     	; 0x3dc <hourGlass+0x180>
     37c:	59 9a       	sbi	0x0b, 1	; 11
     37e:	2e c0       	rjmp	.+92     	; 0x3dc <hourGlass+0x180>
     380:	58 9a       	sbi	0x0b, 0	; 11
     382:	80 91 ba 03 	lds	r24, 0x03BA	; 0x8003ba <plant1+0x1>
     386:	80 93 b4 03 	sts	0x03B4, r24	; 0x8003b4 <frequency>
     38a:	10 92 c7 03 	sts	0x03C7, r1	; 0x8003c7 <day>
     38e:	10 92 c4 03 	sts	0x03C4, r1	; 0x8003c4 <min>
     392:	10 92 c6 03 	sts	0x03C6, r1	; 0x8003c6 <sec>
     396:	10 92 b1 03 	sts	0x03B1, r1	; 0x8003b1 <t>
     39a:	20 c0       	rjmp	.+64     	; 0x3dc <hourGlass+0x180>
     39c:	40 91 c8 03 	lds	r20, 0x03C8	; 0x8003c8 <MS_reading>
     3a0:	50 91 c9 03 	lds	r21, 0x03C9	; 0x8003c9 <MS_reading+0x1>
     3a4:	20 91 bb 03 	lds	r18, 0x03BB	; 0x8003bb <plant1+0x2>
     3a8:	30 91 bc 03 	lds	r19, 0x03BC	; 0x8003bc <plant1+0x3>
     3ac:	42 17       	cp	r20, r18
     3ae:	53 07       	cpc	r21, r19
     3b0:	88 f0       	brcs	.+34     	; 0x3d4 <hourGlass+0x178>
     3b2:	93 cf       	rjmp	.-218    	; 0x2da <hourGlass+0x7e>
     3b4:	20 91 bb 03 	lds	r18, 0x03BB	; 0x8003bb <plant1+0x2>
     3b8:	30 91 bc 03 	lds	r19, 0x03BC	; 0x8003bc <plant1+0x3>
     3bc:	80 91 c8 03 	lds	r24, 0x03C8	; 0x8003c8 <MS_reading>
     3c0:	90 91 c9 03 	lds	r25, 0x03C9	; 0x8003c9 <MS_reading+0x1>
     3c4:	82 17       	cp	r24, r18
     3c6:	93 07       	cpc	r25, r19
     3c8:	08 f0       	brcs	.+2      	; 0x3cc <hourGlass+0x170>
     3ca:	b2 cf       	rjmp	.-156    	; 0x330 <hourGlass+0xd4>
     3cc:	81 e0       	ldi	r24, 0x01	; 1
     3ce:	80 93 bf 03 	sts	0x03BF, r24	; 0x8003bf <elon_musk>
     3d2:	d4 cf       	rjmp	.-88     	; 0x37c <hourGlass+0x120>
     3d4:	91 e0       	ldi	r25, 0x01	; 1
     3d6:	90 93 bf 03 	sts	0x03BF, r25	; 0x8003bf <elon_musk>
     3da:	74 cf       	rjmp	.-280    	; 0x2c4 <hourGlass+0x68>
     3dc:	80 e0       	ldi	r24, 0x00	; 0
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	08 95       	ret

000003e2 <__vector_19>:
     3e2:	1f 92       	push	r1
     3e4:	0f 92       	push	r0
     3e6:	0f b6       	in	r0, 0x3f	; 63
     3e8:	0f 92       	push	r0
     3ea:	11 24       	eor	r1, r1
     3ec:	8f 93       	push	r24
     3ee:	8e b5       	in	r24, 0x2e	; 46
     3f0:	80 93 af 03 	sts	0x03AF, r24	; 0x8003af <newData>
     3f4:	8f 91       	pop	r24
     3f6:	0f 90       	pop	r0
     3f8:	0f be       	out	0x3f, r0	; 63
     3fa:	0f 90       	pop	r0
     3fc:	1f 90       	pop	r1
     3fe:	18 95       	reti

00000400 <GetKeypadKey>:
     400:	8f ee       	ldi	r24, 0xEF	; 239
     402:	85 b9       	out	0x05, r24	; 5
     404:	00 00       	nop
     406:	18 9b       	sbis	0x03, 0	; 3
     408:	29 c0       	rjmp	.+82     	; 0x45c <GetKeypadKey+0x5c>
     40a:	19 9b       	sbis	0x03, 1	; 3
     40c:	29 c0       	rjmp	.+82     	; 0x460 <GetKeypadKey+0x60>
     40e:	1a 9b       	sbis	0x03, 2	; 3
     410:	29 c0       	rjmp	.+82     	; 0x464 <GetKeypadKey+0x64>
     412:	1b 9b       	sbis	0x03, 3	; 3
     414:	29 c0       	rjmp	.+82     	; 0x468 <GetKeypadKey+0x68>
     416:	8f ed       	ldi	r24, 0xDF	; 223
     418:	85 b9       	out	0x05, r24	; 5
     41a:	00 00       	nop
     41c:	18 9b       	sbis	0x03, 0	; 3
     41e:	26 c0       	rjmp	.+76     	; 0x46c <GetKeypadKey+0x6c>
     420:	19 9b       	sbis	0x03, 1	; 3
     422:	26 c0       	rjmp	.+76     	; 0x470 <GetKeypadKey+0x70>
     424:	1a 9b       	sbis	0x03, 2	; 3
     426:	26 c0       	rjmp	.+76     	; 0x474 <GetKeypadKey+0x74>
     428:	1b 9b       	sbis	0x03, 3	; 3
     42a:	26 c0       	rjmp	.+76     	; 0x478 <GetKeypadKey+0x78>
     42c:	8f eb       	ldi	r24, 0xBF	; 191
     42e:	85 b9       	out	0x05, r24	; 5
     430:	00 00       	nop
     432:	18 9b       	sbis	0x03, 0	; 3
     434:	23 c0       	rjmp	.+70     	; 0x47c <GetKeypadKey+0x7c>
     436:	19 9b       	sbis	0x03, 1	; 3
     438:	23 c0       	rjmp	.+70     	; 0x480 <GetKeypadKey+0x80>
     43a:	1a 9b       	sbis	0x03, 2	; 3
     43c:	23 c0       	rjmp	.+70     	; 0x484 <GetKeypadKey+0x84>
     43e:	1b 9b       	sbis	0x03, 3	; 3
     440:	23 c0       	rjmp	.+70     	; 0x488 <GetKeypadKey+0x88>
     442:	8f e7       	ldi	r24, 0x7F	; 127
     444:	85 b9       	out	0x05, r24	; 5
     446:	00 00       	nop
     448:	18 9b       	sbis	0x03, 0	; 3
     44a:	20 c0       	rjmp	.+64     	; 0x48c <GetKeypadKey+0x8c>
     44c:	19 9b       	sbis	0x03, 1	; 3
     44e:	20 c0       	rjmp	.+64     	; 0x490 <GetKeypadKey+0x90>
     450:	1a 9b       	sbis	0x03, 2	; 3
     452:	20 c0       	rjmp	.+64     	; 0x494 <GetKeypadKey+0x94>
     454:	1b 9b       	sbis	0x03, 3	; 3
     456:	20 c0       	rjmp	.+64     	; 0x498 <GetKeypadKey+0x98>
     458:	80 e0       	ldi	r24, 0x00	; 0
     45a:	08 95       	ret
     45c:	81 e3       	ldi	r24, 0x31	; 49
     45e:	08 95       	ret
     460:	84 e3       	ldi	r24, 0x34	; 52
     462:	08 95       	ret
     464:	87 e3       	ldi	r24, 0x37	; 55
     466:	08 95       	ret
     468:	8a e2       	ldi	r24, 0x2A	; 42
     46a:	08 95       	ret
     46c:	82 e3       	ldi	r24, 0x32	; 50
     46e:	08 95       	ret
     470:	85 e3       	ldi	r24, 0x35	; 53
     472:	08 95       	ret
     474:	88 e3       	ldi	r24, 0x38	; 56
     476:	08 95       	ret
     478:	80 e3       	ldi	r24, 0x30	; 48
     47a:	08 95       	ret
     47c:	83 e3       	ldi	r24, 0x33	; 51
     47e:	08 95       	ret
     480:	86 e3       	ldi	r24, 0x36	; 54
     482:	08 95       	ret
     484:	89 e3       	ldi	r24, 0x39	; 57
     486:	08 95       	ret
     488:	83 e2       	ldi	r24, 0x23	; 35
     48a:	08 95       	ret
     48c:	81 e4       	ldi	r24, 0x41	; 65
     48e:	08 95       	ret
     490:	82 e4       	ldi	r24, 0x42	; 66
     492:	08 95       	ret
     494:	83 e4       	ldi	r24, 0x43	; 67
     496:	08 95       	ret
     498:	84 e4       	ldi	r24, 0x44	; 68
     49a:	08 95       	ret

0000049c <TimerISR>:
     49c:	cf 92       	push	r12
     49e:	df 92       	push	r13
     4a0:	ef 92       	push	r14
     4a2:	ff 92       	push	r15
     4a4:	1f 93       	push	r17
     4a6:	cf 93       	push	r28
     4a8:	df 93       	push	r29
     4aa:	10 92 a5 03 	sts	0x03A5, r1	; 0x8003a5 <i.1801>
     4ae:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <tasksNum>
     4b2:	88 23       	and	r24, r24
     4b4:	09 f4       	brne	.+2      	; 0x4b8 <TimerISR+0x1c>
     4b6:	53 c0       	rjmp	.+166    	; 0x55e <TimerISR+0xc2>
     4b8:	80 e0       	ldi	r24, 0x00	; 0
     4ba:	1b e0       	ldi	r17, 0x0B	; 11
     4bc:	c0 91 b5 03 	lds	r28, 0x03B5	; 0x8003b5 <tasks>
     4c0:	d0 91 b6 03 	lds	r29, 0x03B6	; 0x8003b6 <tasks+0x1>
     4c4:	18 9f       	mul	r17, r24
     4c6:	c0 0d       	add	r28, r0
     4c8:	d1 1d       	adc	r29, r1
     4ca:	11 24       	eor	r1, r1
     4cc:	4d 81       	ldd	r20, Y+5	; 0x05
     4ce:	5e 81       	ldd	r21, Y+6	; 0x06
     4d0:	6f 81       	ldd	r22, Y+7	; 0x07
     4d2:	78 85       	ldd	r23, Y+8	; 0x08
     4d4:	89 81       	ldd	r24, Y+1	; 0x01
     4d6:	9a 81       	ldd	r25, Y+2	; 0x02
     4d8:	ab 81       	ldd	r26, Y+3	; 0x03
     4da:	bc 81       	ldd	r27, Y+4	; 0x04
     4dc:	48 17       	cp	r20, r24
     4de:	59 07       	cpc	r21, r25
     4e0:	6a 07       	cpc	r22, r26
     4e2:	7b 07       	cpc	r23, r27
     4e4:	b0 f0       	brcs	.+44     	; 0x512 <TimerISR+0x76>
     4e6:	88 81       	ld	r24, Y
     4e8:	e9 85       	ldd	r30, Y+9	; 0x09
     4ea:	fa 85       	ldd	r31, Y+10	; 0x0a
     4ec:	08 2e       	mov	r0, r24
     4ee:	00 0c       	add	r0, r0
     4f0:	99 0b       	sbc	r25, r25
     4f2:	09 95       	icall
     4f4:	88 83       	st	Y, r24
     4f6:	80 91 a5 03 	lds	r24, 0x03A5	; 0x8003a5 <i.1801>
     4fa:	e0 91 b5 03 	lds	r30, 0x03B5	; 0x8003b5 <tasks>
     4fe:	f0 91 b6 03 	lds	r31, 0x03B6	; 0x8003b6 <tasks+0x1>
     502:	18 9f       	mul	r17, r24
     504:	e0 0d       	add	r30, r0
     506:	f1 1d       	adc	r31, r1
     508:	11 24       	eor	r1, r1
     50a:	15 82       	std	Z+5, r1	; 0x05
     50c:	16 82       	std	Z+6, r1	; 0x06
     50e:	17 82       	std	Z+7, r1	; 0x07
     510:	10 86       	std	Z+8, r1	; 0x08
     512:	80 91 a5 03 	lds	r24, 0x03A5	; 0x8003a5 <i.1801>
     516:	e0 91 b5 03 	lds	r30, 0x03B5	; 0x8003b5 <tasks>
     51a:	f0 91 b6 03 	lds	r31, 0x03B6	; 0x8003b6 <tasks+0x1>
     51e:	18 9f       	mul	r17, r24
     520:	e0 0d       	add	r30, r0
     522:	f1 1d       	adc	r31, r1
     524:	11 24       	eor	r1, r1
     526:	c5 80       	ldd	r12, Z+5	; 0x05
     528:	d6 80       	ldd	r13, Z+6	; 0x06
     52a:	e7 80       	ldd	r14, Z+7	; 0x07
     52c:	f0 84       	ldd	r15, Z+8	; 0x08
     52e:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <tasksPeriodGCD>
     532:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <tasksPeriodGCD+0x1>
     536:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <tasksPeriodGCD+0x2>
     53a:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <tasksPeriodGCD+0x3>
     53e:	4c 0d       	add	r20, r12
     540:	5d 1d       	adc	r21, r13
     542:	6e 1d       	adc	r22, r14
     544:	7f 1d       	adc	r23, r15
     546:	45 83       	std	Z+5, r20	; 0x05
     548:	56 83       	std	Z+6, r21	; 0x06
     54a:	67 83       	std	Z+7, r22	; 0x07
     54c:	70 87       	std	Z+8, r23	; 0x08
     54e:	8f 5f       	subi	r24, 0xFF	; 255
     550:	80 93 a5 03 	sts	0x03A5, r24	; 0x8003a5 <i.1801>
     554:	90 91 aa 03 	lds	r25, 0x03AA	; 0x8003aa <tasksNum>
     558:	89 17       	cp	r24, r25
     55a:	08 f4       	brcc	.+2      	; 0x55e <TimerISR+0xc2>
     55c:	af cf       	rjmp	.-162    	; 0x4bc <TimerISR+0x20>
     55e:	df 91       	pop	r29
     560:	cf 91       	pop	r28
     562:	1f 91       	pop	r17
     564:	ff 90       	pop	r15
     566:	ef 90       	pop	r14
     568:	df 90       	pop	r13
     56a:	cf 90       	pop	r12
     56c:	08 95       	ret

0000056e <__vector_13>:
     56e:	1f 92       	push	r1
     570:	0f 92       	push	r0
     572:	0f b6       	in	r0, 0x3f	; 63
     574:	0f 92       	push	r0
     576:	11 24       	eor	r1, r1
     578:	0b b6       	in	r0, 0x3b	; 59
     57a:	0f 92       	push	r0
     57c:	2f 93       	push	r18
     57e:	3f 93       	push	r19
     580:	4f 93       	push	r20
     582:	5f 93       	push	r21
     584:	6f 93       	push	r22
     586:	7f 93       	push	r23
     588:	8f 93       	push	r24
     58a:	9f 93       	push	r25
     58c:	af 93       	push	r26
     58e:	bf 93       	push	r27
     590:	ef 93       	push	r30
     592:	ff 93       	push	r31
     594:	80 91 ab 03 	lds	r24, 0x03AB	; 0x8003ab <tasksPeriodCntDown>
     598:	90 91 ac 03 	lds	r25, 0x03AC	; 0x8003ac <tasksPeriodCntDown+0x1>
     59c:	a0 91 ad 03 	lds	r26, 0x03AD	; 0x8003ad <tasksPeriodCntDown+0x2>
     5a0:	b0 91 ae 03 	lds	r27, 0x03AE	; 0x8003ae <tasksPeriodCntDown+0x3>
     5a4:	01 97       	sbiw	r24, 0x01	; 1
     5a6:	a1 09       	sbc	r26, r1
     5a8:	b1 09       	sbc	r27, r1
     5aa:	80 93 ab 03 	sts	0x03AB, r24	; 0x8003ab <tasksPeriodCntDown>
     5ae:	90 93 ac 03 	sts	0x03AC, r25	; 0x8003ac <tasksPeriodCntDown+0x1>
     5b2:	a0 93 ad 03 	sts	0x03AD, r26	; 0x8003ad <tasksPeriodCntDown+0x2>
     5b6:	b0 93 ae 03 	sts	0x03AE, r27	; 0x8003ae <tasksPeriodCntDown+0x3>
     5ba:	89 2b       	or	r24, r25
     5bc:	8a 2b       	or	r24, r26
     5be:	8b 2b       	or	r24, r27
     5c0:	89 f4       	brne	.+34     	; 0x5e4 <__vector_13+0x76>
     5c2:	6c df       	rcall	.-296    	; 0x49c <TimerISR>
     5c4:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <tasksPeriodGCD>
     5c8:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <tasksPeriodGCD+0x1>
     5cc:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <tasksPeriodGCD+0x2>
     5d0:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <tasksPeriodGCD+0x3>
     5d4:	80 93 ab 03 	sts	0x03AB, r24	; 0x8003ab <tasksPeriodCntDown>
     5d8:	90 93 ac 03 	sts	0x03AC, r25	; 0x8003ac <tasksPeriodCntDown+0x1>
     5dc:	a0 93 ad 03 	sts	0x03AD, r26	; 0x8003ad <tasksPeriodCntDown+0x2>
     5e0:	b0 93 ae 03 	sts	0x03AE, r27	; 0x8003ae <tasksPeriodCntDown+0x3>
     5e4:	ff 91       	pop	r31
     5e6:	ef 91       	pop	r30
     5e8:	bf 91       	pop	r27
     5ea:	af 91       	pop	r26
     5ec:	9f 91       	pop	r25
     5ee:	8f 91       	pop	r24
     5f0:	7f 91       	pop	r23
     5f2:	6f 91       	pop	r22
     5f4:	5f 91       	pop	r21
     5f6:	4f 91       	pop	r20
     5f8:	3f 91       	pop	r19
     5fa:	2f 91       	pop	r18
     5fc:	0f 90       	pop	r0
     5fe:	0b be       	out	0x3b, r0	; 59
     600:	0f 90       	pop	r0
     602:	0f be       	out	0x3f, r0	; 63
     604:	0f 90       	pop	r0
     606:	1f 90       	pop	r1
     608:	18 95       	reti

0000060a <TimerSet>:
     60a:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <tasksPeriodGCD>
     60e:	70 93 09 01 	sts	0x0109, r23	; 0x800109 <tasksPeriodGCD+0x1>
     612:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <tasksPeriodGCD+0x2>
     616:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <tasksPeriodGCD+0x3>
     61a:	60 93 ab 03 	sts	0x03AB, r22	; 0x8003ab <tasksPeriodCntDown>
     61e:	70 93 ac 03 	sts	0x03AC, r23	; 0x8003ac <tasksPeriodCntDown+0x1>
     622:	80 93 ad 03 	sts	0x03AD, r24	; 0x8003ad <tasksPeriodCntDown+0x2>
     626:	90 93 ae 03 	sts	0x03AE, r25	; 0x8003ae <tasksPeriodCntDown+0x3>
     62a:	08 95       	ret

0000062c <TimerOn>:
     62c:	8b e0       	ldi	r24, 0x0B	; 11
     62e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     632:	8d e7       	ldi	r24, 0x7D	; 125
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     63a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     63e:	82 e0       	ldi	r24, 0x02	; 2
     640:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     644:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     648:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     64c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <tasksPeriodGCD>
     650:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <tasksPeriodGCD+0x1>
     654:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <tasksPeriodGCD+0x2>
     658:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <tasksPeriodGCD+0x3>
     65c:	80 93 ab 03 	sts	0x03AB, r24	; 0x8003ab <tasksPeriodCntDown>
     660:	90 93 ac 03 	sts	0x03AC, r25	; 0x8003ac <tasksPeriodCntDown+0x1>
     664:	a0 93 ad 03 	sts	0x03AD, r26	; 0x8003ad <tasksPeriodCntDown+0x2>
     668:	b0 93 ae 03 	sts	0x03AE, r27	; 0x8003ae <tasksPeriodCntDown+0x3>
     66c:	8f b7       	in	r24, 0x3f	; 63
     66e:	80 68       	ori	r24, 0x80	; 128
     670:	8f bf       	out	0x3f, r24	; 63
     672:	08 95       	ret

00000674 <ADC_init>:
     674:	80 e4       	ldi	r24, 0x40	; 64
     676:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     67a:	ea e7       	ldi	r30, 0x7A	; 122
     67c:	f0 e0       	ldi	r31, 0x00	; 0
     67e:	80 81       	ld	r24, Z
     680:	80 6e       	ori	r24, 0xE0	; 224
     682:	80 83       	st	Z, r24
     684:	08 95       	ret

00000686 <readJoystick>:
     686:	84 e0       	ldi	r24, 0x04	; 4
     688:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     68c:	8e e1       	ldi	r24, 0x1E	; 30
     68e:	00 00       	nop
     690:	81 50       	subi	r24, 0x01	; 1
     692:	e9 f7       	brne	.-6      	; 0x68e <readJoystick+0x8>
     694:	8e e1       	ldi	r24, 0x1E	; 30
     696:	80 93 a4 03 	sts	0x03A4, r24	; 0x8003a4 <i.1899>
     69a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     69e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     6a2:	90 93 a9 03 	sts	0x03A9, r25	; 0x8003a9 <LR+0x1>
     6a6:	80 93 a8 03 	sts	0x03A8, r24	; 0x8003a8 <LR>
     6aa:	85 e0       	ldi	r24, 0x05	; 5
     6ac:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     6b0:	8e e1       	ldi	r24, 0x1E	; 30
     6b2:	00 00       	nop
     6b4:	81 50       	subi	r24, 0x01	; 1
     6b6:	e9 f7       	brne	.-6      	; 0x6b2 <readJoystick+0x2c>
     6b8:	8e e1       	ldi	r24, 0x1E	; 30
     6ba:	80 93 a4 03 	sts	0x03A4, r24	; 0x8003a4 <i.1899>
     6be:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     6c2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     6c6:	90 93 a7 03 	sts	0x03A7, r25	; 0x8003a7 <UD+0x1>
     6ca:	80 93 a6 03 	sts	0x03A6, r24	; 0x8003a6 <UD>
     6ce:	08 95       	ret

000006d0 <transmit_data>:
     6d0:	20 e0       	ldi	r18, 0x00	; 0
     6d2:	30 e0       	ldi	r19, 0x00	; 0
     6d4:	58 e0       	ldi	r21, 0x08	; 8
     6d6:	e8 2f       	mov	r30, r24
     6d8:	f0 e0       	ldi	r31, 0x00	; 0
     6da:	52 b9       	out	0x02, r21	; 2
     6dc:	42 b1       	in	r20, 0x02	; 2
     6de:	bf 01       	movw	r22, r30
     6e0:	02 2e       	mov	r0, r18
     6e2:	02 c0       	rjmp	.+4      	; 0x6e8 <transmit_data+0x18>
     6e4:	75 95       	asr	r23
     6e6:	67 95       	ror	r22
     6e8:	0a 94       	dec	r0
     6ea:	e2 f7       	brpl	.-8      	; 0x6e4 <transmit_data+0x14>
     6ec:	96 2f       	mov	r25, r22
     6ee:	91 70       	andi	r25, 0x01	; 1
     6f0:	94 2b       	or	r25, r20
     6f2:	92 b9       	out	0x02, r25	; 2
     6f4:	12 9a       	sbi	0x02, 2	; 2
     6f6:	2f 5f       	subi	r18, 0xFF	; 255
     6f8:	3f 4f       	sbci	r19, 0xFF	; 255
     6fa:	28 30       	cpi	r18, 0x08	; 8
     6fc:	31 05       	cpc	r19, r1
     6fe:	69 f7       	brne	.-38     	; 0x6da <transmit_data+0xa>
     700:	11 9a       	sbi	0x02, 1	; 2
     702:	12 b8       	out	0x02, r1	; 2
     704:	08 95       	ret

00000706 <saveMS>:
     706:	26 2f       	mov	r18, r22
     708:	30 e0       	ldi	r19, 0x00	; 0
     70a:	bc 01       	movw	r22, r24
     70c:	c9 01       	movw	r24, r18
     70e:	02 96       	adiw	r24, 0x02	; 2
     710:	0c 94 b3 0e 	jmp	0x1d66	; 0x1d66 <eeprom_write_word>
     714:	08 95       	ret

00000716 <savePlantProfile>:
     716:	0f 93       	push	r16
     718:	1f 93       	push	r17
     71a:	cf 93       	push	r28
     71c:	df 93       	push	r29
     71e:	00 d0       	rcall	.+0      	; 0x720 <savePlantProfile+0xa>
     720:	00 d0       	rcall	.+0      	; 0x722 <savePlantProfile+0xc>
     722:	00 d0       	rcall	.+0      	; 0x724 <savePlantProfile+0xe>
     724:	cd b7       	in	r28, 0x3d	; 61
     726:	de b7       	in	r29, 0x3e	; 62
     728:	5a 83       	std	Y+2, r21	; 0x02
     72a:	6b 83       	std	Y+3, r22	; 0x03
     72c:	7c 83       	std	Y+4, r23	; 0x04
     72e:	8d 83       	std	Y+5, r24	; 0x05
     730:	9e 83       	std	Y+6, r25	; 0x06
     732:	02 2f       	mov	r16, r18
     734:	10 e0       	ldi	r17, 0x00	; 0
     736:	64 2f       	mov	r22, r20
     738:	c8 01       	movw	r24, r16
     73a:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <eeprom_write_byte>
     73e:	6a 81       	ldd	r22, Y+2	; 0x02
     740:	c8 01       	movw	r24, r16
     742:	01 96       	adiw	r24, 0x01	; 1
     744:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <eeprom_write_byte>
     748:	6b 81       	ldd	r22, Y+3	; 0x03
     74a:	7c 81       	ldd	r23, Y+4	; 0x04
     74c:	c8 01       	movw	r24, r16
     74e:	02 96       	adiw	r24, 0x02	; 2
     750:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <eeprom_write_word>
     754:	6d 81       	ldd	r22, Y+5	; 0x05
     756:	7e 81       	ldd	r23, Y+6	; 0x06
     758:	c8 01       	movw	r24, r16
     75a:	04 96       	adiw	r24, 0x04	; 4
     75c:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <eeprom_write_word>
     760:	26 96       	adiw	r28, 0x06	; 6
     762:	0f b6       	in	r0, 0x3f	; 63
     764:	f8 94       	cli
     766:	de bf       	out	0x3e, r29	; 62
     768:	0f be       	out	0x3f, r0	; 63
     76a:	cd bf       	out	0x3d, r28	; 61
     76c:	df 91       	pop	r29
     76e:	cf 91       	pop	r28
     770:	1f 91       	pop	r17
     772:	0f 91       	pop	r16
     774:	08 95       	ret

00000776 <retrievePlantProfile>:
     776:	0f 93       	push	r16
     778:	1f 93       	push	r17
     77a:	cf 93       	push	r28
     77c:	df 93       	push	r29
     77e:	c8 2f       	mov	r28, r24
     780:	d0 e0       	ldi	r29, 0x00	; 0
     782:	ce 01       	movw	r24, r28
     784:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <eeprom_read_byte>
     788:	09 eb       	ldi	r16, 0xB9	; 185
     78a:	13 e0       	ldi	r17, 0x03	; 3
     78c:	f8 01       	movw	r30, r16
     78e:	80 83       	st	Z, r24
     790:	ce 01       	movw	r24, r28
     792:	01 96       	adiw	r24, 0x01	; 1
     794:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <eeprom_read_byte>
     798:	f8 01       	movw	r30, r16
     79a:	81 83       	std	Z+1, r24	; 0x01
     79c:	ce 01       	movw	r24, r28
     79e:	02 96       	adiw	r24, 0x02	; 2
     7a0:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <eeprom_read_word>
     7a4:	f8 01       	movw	r30, r16
     7a6:	93 83       	std	Z+3, r25	; 0x03
     7a8:	82 83       	std	Z+2, r24	; 0x02
     7aa:	ce 01       	movw	r24, r28
     7ac:	04 96       	adiw	r24, 0x04	; 4
     7ae:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <eeprom_read_word>
     7b2:	f8 01       	movw	r30, r16
     7b4:	95 83       	std	Z+5, r25	; 0x05
     7b6:	84 83       	std	Z+4, r24	; 0x04
     7b8:	df 91       	pop	r29
     7ba:	cf 91       	pop	r28
     7bc:	1f 91       	pop	r17
     7be:	0f 91       	pop	r16
     7c0:	08 95       	ret

000007c2 <readMoisture>:
     7c2:	86 e0       	ldi	r24, 0x06	; 6
     7c4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     7c8:	8e e1       	ldi	r24, 0x1E	; 30
     7ca:	00 00       	nop
     7cc:	81 50       	subi	r24, 0x01	; 1
     7ce:	e9 f7       	brne	.-6      	; 0x7ca <readMoisture+0x8>
     7d0:	8e e1       	ldi	r24, 0x1E	; 30
     7d2:	80 93 a3 03 	sts	0x03A3, r24	; 0x8003a3 <i.1932>
     7d6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     7da:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     7de:	90 93 c9 03 	sts	0x03C9, r25	; 0x8003c9 <MS_reading+0x1>
     7e2:	80 93 c8 03 	sts	0x03C8, r24	; 0x8003c8 <MS_reading>
     7e6:	08 95       	ret

000007e8 <readSun>:
     7e8:	87 e0       	ldi	r24, 0x07	; 7
     7ea:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     7ee:	8e e1       	ldi	r24, 0x1E	; 30
     7f0:	00 00       	nop
     7f2:	81 50       	subi	r24, 0x01	; 1
     7f4:	e9 f7       	brne	.-6      	; 0x7f0 <readSun+0x8>
     7f6:	8e e1       	ldi	r24, 0x1E	; 30
     7f8:	80 93 a2 03 	sts	0x03A2, r24	; 0x8003a2 <__data_end>
     7fc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     800:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     804:	90 93 cb 03 	sts	0x03CB, r25	; 0x8003cb <SUN_reading+0x1>
     808:	80 93 ca 03 	sts	0x03CA, r24	; 0x8003ca <SUN_reading>
     80c:	08 95       	ret

0000080e <reader>:
     80e:	80 91 c5 03 	lds	r24, 0x03C5	; 0x8003c5 <ADC_state>
     812:	81 11       	cpse	r24, r1
     814:	10 92 c5 03 	sts	0x03C5, r1	; 0x8003c5 <ADC_state>
     818:	36 df       	rcall	.-404    	; 0x686 <readJoystick>
     81a:	d3 df       	rcall	.-90     	; 0x7c2 <readMoisture>
     81c:	e5 df       	rcall	.-54     	; 0x7e8 <readSun>
     81e:	80 91 c5 03 	lds	r24, 0x03C5	; 0x8003c5 <ADC_state>
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	08 95       	ret

00000826 <rounder>:
     826:	20 e0       	ldi	r18, 0x00	; 0
     828:	30 e0       	ldi	r19, 0x00	; 0
     82a:	40 e0       	ldi	r20, 0x00	; 0
     82c:	5f e3       	ldi	r21, 0x3F	; 63
     82e:	0e 94 ac 0c 	call	0x1958	; 0x1958 <__addsf3>
     832:	0c 94 79 0d 	jmp	0x1af2	; 0x1af2 <floor>
     836:	08 95       	ret

00000838 <convertToDec>:

void convertToDec(uchar pos, unsigned short x) {
     838:	ff 92       	push	r15
     83a:	0f 93       	push	r16
     83c:	1f 93       	push	r17
     83e:	cf 93       	push	r28
     840:	df 93       	push	r29
     842:	f8 2e       	mov	r15, r24
     844:	eb 01       	movw	r28, r22
	if (enableScaler == 1) {
     846:	80 91 b7 03 	lds	r24, 0x03B7	; 0x8003b7 <enableScaler>
     84a:	81 30       	cpi	r24, 0x01	; 1
     84c:	99 f4       	brne	.+38     	; 0x874 <convertToDec+0x3c>
	return floor(d + 0.5);
}

double scaler(double x, double input_min, double input_max, double output_min, double output_max) {
	double slope = 1.0 * (output_max - output_min) / (input_max - input_min);
	double output = output_min + rounder(slope * (x - input_min));
     84e:	80 e0       	ldi	r24, 0x00	; 0
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <__floatunsisf>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	48 ec       	ldi	r20, 0xC8	; 200
     85c:	5d e3       	ldi	r21, 0x3D	; 61
     85e:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <__mulsf3>
     862:	e1 df       	rcall	.-62     	; 0x826 <rounder>
	return (unsigned short)output;
     864:	20 e0       	ldi	r18, 0x00	; 0
     866:	30 e0       	ldi	r19, 0x00	; 0
     868:	a9 01       	movw	r20, r18
     86a:	0e 94 ac 0c 	call	0x1958	; 0x1958 <__addsf3>
     86e:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <__fixunssfsi>
     872:	eb 01       	movw	r28, r22
	unsigned short thousands;
	unsigned short hundreds;
	unsigned short tens;
	unsigned short ones;
	
	thousands = x / 1000;
     874:	9e 01       	movw	r18, r28
     876:	36 95       	lsr	r19
     878:	27 95       	ror	r18
     87a:	36 95       	lsr	r19
     87c:	27 95       	ror	r18
     87e:	36 95       	lsr	r19
     880:	27 95       	ror	r18
     882:	a5 ec       	ldi	r26, 0xC5	; 197
     884:	b0 e2       	ldi	r27, 0x20	; 32
     886:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <__umulhisi3>
     88a:	8c 01       	movw	r16, r24
     88c:	12 95       	swap	r17
     88e:	02 95       	swap	r16
     890:	0f 70       	andi	r16, 0x0F	; 15
     892:	01 27       	eor	r16, r17
     894:	1f 70       	andi	r17, 0x0F	; 15
     896:	01 27       	eor	r16, r17
	LCD_Cursor(pos);
     898:	8f 2d       	mov	r24, r15
     89a:	ab dc       	rcall	.-1706   	; 0x1f2 <LCD_Cursor>
	LCD_WriteData(thousands + '0');
     89c:	c8 01       	movw	r24, r16
     89e:	c0 96       	adiw	r24, 0x30	; 48
     8a0:	bf dc       	rcall	.-1666   	; 0x220 <LCD_WriteData>
	x = x - (thousands * 1000);
     8a2:	28 ee       	ldi	r18, 0xE8	; 232
     8a4:	33 e0       	ldi	r19, 0x03	; 3
     8a6:	02 9f       	mul	r16, r18
     8a8:	c0 01       	movw	r24, r0
     8aa:	03 9f       	mul	r16, r19
     8ac:	90 0d       	add	r25, r0
     8ae:	12 9f       	mul	r17, r18
     8b0:	90 0d       	add	r25, r0
     8b2:	11 24       	eor	r1, r1
     8b4:	c8 1b       	sub	r28, r24
     8b6:	d9 0b       	sbc	r29, r25

	hundreds = x / 100;
     8b8:	9e 01       	movw	r18, r28
     8ba:	36 95       	lsr	r19
     8bc:	27 95       	ror	r18
     8be:	36 95       	lsr	r19
     8c0:	27 95       	ror	r18
     8c2:	ab e7       	ldi	r26, 0x7B	; 123
     8c4:	b4 e1       	ldi	r27, 0x14	; 20
     8c6:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <__umulhisi3>
     8ca:	8c 01       	movw	r16, r24
     8cc:	16 95       	lsr	r17
	LCD_Cursor(pos+1);
     8ce:	07 95       	ror	r16
     8d0:	81 e0       	ldi	r24, 0x01	; 1
     8d2:	8f 0d       	add	r24, r15
	LCD_WriteData(hundreds + '0');
     8d4:	8e dc       	rcall	.-1764   	; 0x1f2 <LCD_Cursor>
     8d6:	c8 01       	movw	r24, r16
     8d8:	c0 96       	adiw	r24, 0x30	; 48
     8da:	a2 dc       	rcall	.-1724   	; 0x220 <LCD_WriteData>
	x = x - (hundreds * 100);
     8dc:	24 e6       	ldi	r18, 0x64	; 100
     8de:	20 9f       	mul	r18, r16
     8e0:	c0 01       	movw	r24, r0
     8e2:	21 9f       	mul	r18, r17
     8e4:	90 0d       	add	r25, r0
     8e6:	11 24       	eor	r1, r1
     8e8:	c8 1b       	sub	r28, r24
     8ea:	d9 0b       	sbc	r29, r25
	
	tens = x / 10;
     8ec:	9e 01       	movw	r18, r28
     8ee:	ad ec       	ldi	r26, 0xCD	; 205
     8f0:	bc ec       	ldi	r27, 0xCC	; 204
     8f2:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <__umulhisi3>
     8f6:	8c 01       	movw	r16, r24
     8f8:	16 95       	lsr	r17
     8fa:	07 95       	ror	r16
     8fc:	16 95       	lsr	r17
     8fe:	07 95       	ror	r16
     900:	16 95       	lsr	r17
	LCD_Cursor(pos+2);
     902:	07 95       	ror	r16
     904:	82 e0       	ldi	r24, 0x02	; 2
     906:	8f 0d       	add	r24, r15
	LCD_WriteData(tens + '0');
     908:	74 dc       	rcall	.-1816   	; 0x1f2 <LCD_Cursor>
     90a:	c8 01       	movw	r24, r16
     90c:	c0 96       	adiw	r24, 0x30	; 48
     90e:	88 dc       	rcall	.-1776   	; 0x220 <LCD_WriteData>
	x = x - (tens * 10);
	
	ones = x / 1;
	LCD_Cursor(pos+3);
     910:	83 e0       	ldi	r24, 0x03	; 3
     912:	8f 0d       	add	r24, r15
     914:	6e dc       	rcall	.-1828   	; 0x1f2 <LCD_Cursor>
     916:	e0 96       	adiw	r28, 0x30	; 48
	LCD_WriteData(ones + '0');
     918:	c8 01       	movw	r24, r16
     91a:	88 0f       	add	r24, r24
     91c:	99 1f       	adc	r25, r25
     91e:	00 0f       	add	r16, r16
     920:	11 1f       	adc	r17, r17
     922:	00 0f       	add	r16, r16
     924:	11 1f       	adc	r17, r17
     926:	00 0f       	add	r16, r16
     928:	11 1f       	adc	r17, r17
     92a:	08 0f       	add	r16, r24
     92c:	19 1f       	adc	r17, r25
     92e:	ce 01       	movw	r24, r28
     930:	80 1b       	sub	r24, r16
     932:	91 0b       	sbc	r25, r17
     934:	75 dc       	rcall	.-1814   	; 0x220 <LCD_WriteData>
     936:	df 91       	pop	r29
	x = x - (ones * 1);
}
     938:	cf 91       	pop	r28
     93a:	1f 91       	pop	r17
     93c:	0f 91       	pop	r16
     93e:	ff 90       	pop	r15
     940:	08 95       	ret

00000942 <ss>:
     942:	cf 93       	push	r28
	SETTING3,
	SETTING4,
} stater;


int ss(stater) {
     944:	df 93       	push	r29
     946:	ec 01       	movw	r28, r24
	switch(stater) {
     948:	8d 31       	cpi	r24, 0x1D	; 29
     94a:	91 05       	cpc	r25, r1
     94c:	08 f0       	brcs	.+2      	; 0x950 <ss+0xe>
     94e:	1b c4       	rjmp	.+2102   	; 0x1186 <ss+0x844>
     950:	fc 01       	movw	r30, r24
     952:	ea 5b       	subi	r30, 0xBA	; 186
     954:	ff 4f       	sbci	r31, 0xFF	; 255
     956:	0c 94 80 0e 	jmp	0x1d00	; 0x1d00 <__tablejump2__>
		case WELCOME:
			if (DOWN) {
     95a:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <LR>
     95e:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <LR+0x1>
     962:	83 35       	cpi	r24, 0x53	; 83
     964:	93 40       	sbci	r25, 0x03	; 3
     966:	08 f4       	brcc	.+2      	; 0x96a <ss+0x28>
     968:	21 c4       	rjmp	.+2114   	; 0x11ac <ss+0x86a>
				LCD_ClearScreen();
     96a:	40 dc       	rcall	.-1920   	; 0x1ec <LCD_ClearScreen>
				control = 0;
     96c:	10 92 b2 03 	sts	0x03B2, r1	; 0x8003b2 <control>
     970:	28 c4       	rjmp	.+2128   	; 0x11c2 <ss+0x880>
				stater = MAIN1;
			}
			break;
			
		case MAIN1:
			if (DOWN && control == 0) {
     972:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <LR>
     976:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <LR+0x1>
     97a:	83 35       	cpi	r24, 0x53	; 83
     97c:	23 e0       	ldi	r18, 0x03	; 3
     97e:	92 07       	cpc	r25, r18
     980:	08 f4       	brcc	.+2      	; 0x984 <ss+0x42>
     982:	07 c7       	rjmp	.+3598   	; 0x1792 <ss+0xe50>
     984:	20 91 b2 03 	lds	r18, 0x03B2	; 0x8003b2 <control>
     988:	21 11       	cpse	r18, r1
				LCD_ClearScreen();
     98a:	08 c7       	rjmp	.+3600   	; 0x179c <ss+0xe5a>
     98c:	2f dc       	rcall	.-1954   	; 0x1ec <LCD_ClearScreen>
				control = 1;
     98e:	81 e0       	ldi	r24, 0x01	; 1
     990:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <control>
     994:	2c c0       	rjmp	.+88     	; 0x9ee <ss+0xac>
			}
			else if (UP && control == 1) {
     996:	20 91 b2 03 	lds	r18, 0x03B2	; 0x8003b2 <control>
     99a:	21 30       	cpi	r18, 0x01	; 1
				LCD_ClearScreen();
     99c:	21 f4       	brne	.+8      	; 0x9a6 <ss+0x64>
     99e:	26 dc       	rcall	.-1972   	; 0x1ec <LCD_ClearScreen>
				control = 0;
     9a0:	10 92 b2 03 	sts	0x03B2, r1	; 0x8003b2 <control>
     9a4:	15 c0       	rjmp	.+42     	; 0x9d0 <ss+0x8e>
			}
			else if (DOWN && control == 1) {
     9a6:	83 35       	cpi	r24, 0x53	; 83
     9a8:	93 40       	sbci	r25, 0x03	; 3
     9aa:	08 f4       	brcc	.+2      	; 0x9ae <ss+0x6c>
     9ac:	2c c7       	rjmp	.+3672   	; 0x1806 <ss+0xec4>
     9ae:	28 c7       	rjmp	.+3664   	; 0x1800 <ss+0xebe>
     9b0:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <control>
     9b4:	81 30       	cpi	r24, 0x01	; 1
     9b6:	09 f0       	breq	.+2      	; 0x9ba <ss+0x78>
				LCD_ClearScreen();
     9b8:	f6 c6       	rjmp	.+3564   	; 0x17a6 <ss+0xe64>
     9ba:	18 dc       	rcall	.-2000   	; 0x1ec <LCD_ClearScreen>
				control = 2;
     9bc:	82 e0       	ldi	r24, 0x02	; 2
     9be:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <control>
				stater = MAIN2;
     9c2:	c3 e0       	ldi	r28, 0x03	; 3
     9c4:	d0 e0       	ldi	r29, 0x00	; 0
     9c6:	24 c0       	rjmp	.+72     	; 0xa10 <ss+0xce>
			}
			if (control == 0 && RIGHT) {
     9c8:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <control>
     9cc:	81 11       	cpse	r24, r1
     9ce:	0b c0       	rjmp	.+22     	; 0x9e6 <ss+0xa4>
     9d0:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <UD>
     9d4:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <UD+0x1>
     9d8:	81 32       	cpi	r24, 0x21	; 33
     9da:	93 40       	sbci	r25, 0x03	; 3
     9dc:	08 f4       	brcc	.+2      	; 0x9e0 <ss+0x9e>
				LCD_ClearScreen();
     9de:	19 c7       	rjmp	.+3634   	; 0x1812 <ss+0xed0>
     9e0:	05 dc       	rcall	.-2038   	; 0x1ec <LCD_ClearScreen>
				stater = Q1;
     9e2:	cd e0       	ldi	r28, 0x0D	; 13
     9e4:	d0 e0       	ldi	r29, 0x00	; 0
			}
			if (control == 1 && RIGHT) {
     9e6:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <control>
     9ea:	81 30       	cpi	r24, 0x01	; 1
     9ec:	89 f4       	brne	.+34     	; 0xa10 <ss+0xce>
     9ee:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <UD>
     9f2:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <UD+0x1>
     9f6:	81 32       	cpi	r24, 0x21	; 33
     9f8:	93 40       	sbci	r25, 0x03	; 3
				LCD_ClearScreen();
     9fa:	50 f0       	brcs	.+20     	; 0xa10 <ss+0xce>
     9fc:	f7 db       	rcall	.-2066   	; 0x1ec <LCD_ClearScreen>
				stater = READFROM;
			}
			if (LEFT) {
     9fe:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <UD>
     a02:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <UD+0x1>
     a06:	86 39       	cpi	r24, 0x96	; 150
     a08:	91 05       	cpc	r25, r1
     a0a:	08 f0       	brcs	.+2      	; 0xa0e <ss+0xcc>
     a0c:	bf c4       	rjmp	.+2430   	; 0x138c <ss+0xa4a>
     a0e:	08 c0       	rjmp	.+16     	; 0xa20 <ss+0xde>
     a10:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <UD>
     a14:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <UD+0x1>
     a18:	86 39       	cpi	r24, 0x96	; 150
     a1a:	91 05       	cpc	r25, r1
     a1c:	08 f0       	brcs	.+2      	; 0xa20 <ss+0xde>
				LCD_ClearScreen();
     a1e:	b8 c3       	rjmp	.+1904   	; 0x1190 <ss+0x84e>
     a20:	e5 db       	rcall	.-2102   	; 0x1ec <LCD_ClearScreen>
     a22:	e0 c3       	rjmp	.+1984   	; 0x11e4 <ss+0x8a2>
				stater = SETTINGS;
			}
			break;
			
		case SETTINGS:
			if (RIGHT) {
     a24:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <UD>
     a28:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <UD+0x1>
     a2c:	81 32       	cpi	r24, 0x21	; 33
     a2e:	93 40       	sbci	r25, 0x03	; 3
				LCD_ClearScreen();
     a30:	10 f0       	brcs	.+4      	; 0xa36 <ss+0xf4>
     a32:	dc db       	rcall	.-2120   	; 0x1ec <LCD_ClearScreen>
				stater = MAIN1;
			}
			else if (UP) {
     a34:	c2 c3       	rjmp	.+1924   	; 0x11ba <ss+0x878>
     a36:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <LR>
     a3a:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <LR+0x1>
     a3e:	86 39       	cpi	r24, 0x96	; 150
     a40:	91 05       	cpc	r25, r1
				LCD_ClearScreen();
     a42:	28 f4       	brcc	.+10     	; 0xa4e <ss+0x10c>
				enableScaler = 1;
     a44:	d3 db       	rcall	.-2138   	; 0x1ec <LCD_ClearScreen>
     a46:	81 e0       	ldi	r24, 0x01	; 1
     a48:	80 93 b7 03 	sts	0x03B7, r24	; 0x8003b7 <enableScaler>
				break;
			}
			else if (DOWN) {
     a4c:	cb c3       	rjmp	.+1942   	; 0x11e4 <ss+0x8a2>
     a4e:	83 35       	cpi	r24, 0x53	; 83
     a50:	93 40       	sbci	r25, 0x03	; 3
     a52:	08 f4       	brcc	.+2      	; 0xa56 <ss+0x114>
				LCD_ClearScreen();
     a54:	c7 c3       	rjmp	.+1934   	; 0x11e4 <ss+0x8a2>
     a56:	ca db       	rcall	.-2156   	; 0x1ec <LCD_ClearScreen>
				enableScaler = 0;
     a58:	10 92 b7 03 	sts	0x03B7, r1	; 0x8003b7 <enableScaler>
     a5c:	c3 c3       	rjmp	.+1926   	; 0x11e4 <ss+0x8a2>
			}
			break;
			
		case MAIN2:
			if (UP && control == 2) {
     a5e:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <LR>
     a62:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <LR+0x1>
     a66:	86 39       	cpi	r24, 0x96	; 150
     a68:	91 05       	cpc	r25, r1
     a6a:	08 f0       	brcs	.+2      	; 0xa6e <ss+0x12c>
     a6c:	db c6       	rjmp	.+3510   	; 0x1824 <ss+0xee2>
     a6e:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <control>
     a72:	82 30       	cpi	r24, 0x02	; 2
				LCD_ClearScreen();
     a74:	81 f4       	brne	.+32     	; 0xa96 <ss+0x154>
     a76:	ba db       	rcall	.-2188   	; 0x1ec <LCD_ClearScreen>
				control = 1;
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <control>
				stater = MAIN1;
			}
			if (DOWN && control == 2) {
     a7e:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <LR>
     a82:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <LR+0x1>
     a86:	83 35       	cpi	r24, 0x53	; 83
     a88:	23 e0       	ldi	r18, 0x03	; 3
     a8a:	92 07       	cpc	r25, r18
     a8c:	08 f0       	brcs	.+2      	; 0xa90 <ss+0x14e>
     a8e:	8f c6       	rjmp	.+3358   	; 0x17ae <ss+0xe6c>
			
		case MAIN2:
			if (UP && control == 2) {
				LCD_ClearScreen();
				control = 1;
				stater = MAIN1;
     a90:	c2 e0       	ldi	r28, 0x02	; 2
     a92:	d0 e0       	ldi	r29, 0x00	; 0
     a94:	93 c6       	rjmp	.+3366   	; 0x17bc <ss+0xe7a>
			}
			if (DOWN && control == 2) {
     a96:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <LR>
     a9a:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <LR+0x1>
     a9e:	83 35       	cpi	r24, 0x53	; 83
     aa0:	23 e0       	ldi	r18, 0x03	; 3
     aa2:	92 07       	cpc	r25, r18
     aa4:	08 f4       	brcc	.+2      	; 0xaa8 <ss+0x166>
     aa6:	8a c6       	rjmp	.+3348   	; 0x17bc <ss+0xe7a>
     aa8:	20 91 b2 03 	lds	r18, 0x03B2	; 0x8003b2 <control>
     aac:	22 30       	cpi	r18, 0x02	; 2
				LCD_ClearScreen();
     aae:	09 f0       	breq	.+2      	; 0xab2 <ss+0x170>
     ab0:	80 c6       	rjmp	.+3328   	; 0x17b2 <ss+0xe70>
				control = 3;
     ab2:	9c db       	rcall	.-2248   	; 0x1ec <LCD_ClearScreen>
     ab4:	83 e0       	ldi	r24, 0x03	; 3
     ab6:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <control>
			}
			else if (UP && control == 3) {
     aba:	2d c0       	rjmp	.+90     	; 0xb16 <ss+0x1d4>
     abc:	20 91 b2 03 	lds	r18, 0x03B2	; 0x8003b2 <control>
				LCD_ClearScreen();
     ac0:	23 30       	cpi	r18, 0x03	; 3
     ac2:	29 f4       	brne	.+10     	; 0xace <ss+0x18c>
				control = 2;
     ac4:	93 db       	rcall	.-2266   	; 0x1ec <LCD_ClearScreen>
     ac6:	82 e0       	ldi	r24, 0x02	; 2
     ac8:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <control>
			}
			else if (DOWN && control == 3) {
     acc:	10 c0       	rjmp	.+32     	; 0xaee <ss+0x1ac>
     ace:	83 35       	cpi	r24, 0x53	; 83
     ad0:	93 40       	sbci	r25, 0x03	; 3
     ad2:	08 f0       	brcs	.+2      	; 0xad6 <ss+0x194>
     ad4:	b1 c6       	rjmp	.+3426   	; 0x1838 <ss+0xef6>
				LCD_ClearScreen();
     ad6:	bc c6       	rjmp	.+3448   	; 0x1850 <ss+0xf0e>
     ad8:	89 db       	rcall	.-2286   	; 0x1ec <LCD_ClearScreen>
				control = 4;
     ada:	84 e0       	ldi	r24, 0x04	; 4
     adc:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <control>
				stater = MAIN3;
     ae0:	c4 e0       	ldi	r28, 0x04	; 4
     ae2:	d0 e0       	ldi	r29, 0x00	; 0
			}
			if (control == 2 && RIGHT) {
     ae4:	55 c3       	rjmp	.+1706   	; 0x1190 <ss+0x84e>
     ae6:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <control>
     aea:	82 30       	cpi	r24, 0x02	; 2
     aec:	79 f4       	brne	.+30     	; 0xb0c <ss+0x1ca>
     aee:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <UD>
     af2:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <UD+0x1>
     af6:	81 32       	cpi	r24, 0x21	; 33
     af8:	93 40       	sbci	r25, 0x03	; 3
     afa:	08 f4       	brcc	.+2      	; 0xafe <ss+0x1bc>
				LCD_ClearScreen();
     afc:	49 c3       	rjmp	.+1682   	; 0x1190 <ss+0x84e>
     afe:	76 db       	rcall	.-2324   	; 0x1ec <LCD_ClearScreen>
				stater = TAKE_READING;
			}
			if (control == 3 && RIGHT) {
     b00:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <control>
     b04:	83 30       	cpi	r24, 0x03	; 3
     b06:	09 f4       	brne	.+2      	; 0xb0a <ss+0x1c8>
     b08:	a9 c6       	rjmp	.+3410   	; 0x185c <ss+0xf1a>
     b0a:	e9 c3       	rjmp	.+2002   	; 0x12de <ss+0x99c>
     b0c:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <control>
     b10:	83 30       	cpi	r24, 0x03	; 3
     b12:	09 f0       	breq	.+2      	; 0xb16 <ss+0x1d4>
     b14:	3d c3       	rjmp	.+1658   	; 0x1190 <ss+0x84e>
     b16:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <UD>
     b1a:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <UD+0x1>
     b1e:	81 32       	cpi	r24, 0x21	; 33
     b20:	93 40       	sbci	r25, 0x03	; 3
				LCD_ClearScreen();
     b22:	08 f4       	brcc	.+2      	; 0xb26 <ss+0x1e4>
     b24:	65 c6       	rjmp	.+3274   	; 0x17f0 <ss+0xeae>
     b26:	62 db       	rcall	.-2364   	; 0x1ec <LCD_ClearScreen>
				stater = GLANCE1;
			}
			break;
			
		case MAIN3:
			if (UP && control == 4) {
     b28:	a2 c3       	rjmp	.+1860   	; 0x126e <ss+0x92c>
     b2a:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <LR>
     b2e:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <LR+0x1>
     b32:	86 39       	cpi	r24, 0x96	; 150
     b34:	91 05       	cpc	r25, r1
     b36:	e8 f4       	brcc	.+58     	; 0xb72 <ss+0x230>
     b38:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <control>
     b3c:	84 30       	cpi	r24, 0x04	; 4
				LCD_ClearScreen();
     b3e:	79 f4       	brne	.+30     	; 0xb5e <ss+0x21c>
     b40:	55 db       	rcall	.-2390   	; 0x1ec <LCD_ClearScreen>
				control = 3;
     b42:	83 e0       	ldi	r24, 0x03	; 3
     b44:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <control>
				stater = MAIN2;
			}
			if (UP && control == 5) {
     b48:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <LR>
     b4c:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <LR+0x1>
     b50:	86 39       	cpi	r24, 0x96	; 150
     b52:	91 05       	cpc	r25, r1
     b54:	08 f4       	brcc	.+2      	; 0xb58 <ss+0x216>
			
		case MAIN3:
			if (UP && control == 4) {
				LCD_ClearScreen();
				control = 3;
				stater = MAIN2;
     b56:	8b c6       	rjmp	.+3350   	; 0x186e <ss+0xf2c>
     b58:	c3 e0       	ldi	r28, 0x03	; 3
     b5a:	d0 e0       	ldi	r29, 0x00	; 0
			}
			if (UP && control == 5) {
     b5c:	18 c0       	rjmp	.+48     	; 0xb8e <ss+0x24c>
     b5e:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <control>
     b62:	85 30       	cpi	r24, 0x05	; 5
				LCD_ClearScreen();
     b64:	09 f0       	breq	.+2      	; 0xb68 <ss+0x226>
     b66:	2f c6       	rjmp	.+3166   	; 0x17c6 <ss+0xe84>
				control = 4;
     b68:	41 db       	rcall	.-2430   	; 0x1ec <LCD_ClearScreen>
     b6a:	84 e0       	ldi	r24, 0x04	; 4
     b6c:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <control>
			}
			if (control == 4 && RIGHT) {
     b70:	04 c0       	rjmp	.+8      	; 0xb7a <ss+0x238>
     b72:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <control>
     b76:	84 30       	cpi	r24, 0x04	; 4
     b78:	51 f4       	brne	.+20     	; 0xb8e <ss+0x24c>
     b7a:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <UD>
     b7e:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <UD+0x1>
     b82:	81 32       	cpi	r24, 0x21	; 33
				LCD_ClearScreen();
     b84:	93 40       	sbci	r25, 0x03	; 3
     b86:	c8 f0       	brcs	.+50     	; 0xbba <ss+0x278>
				stater = CALIB_MS;
     b88:	31 db       	rcall	.-2462   	; 0x1ec <LCD_ClearScreen>
     b8a:	ca e0       	ldi	r28, 0x0A	; 10
			}
			if (control == 5 && RIGHT) {
     b8c:	d0 e0       	ldi	r29, 0x00	; 0
     b8e:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <control>
     b92:	85 30       	cpi	r24, 0x05	; 5
     b94:	91 f4       	brne	.+36     	; 0xbba <ss+0x278>
     b96:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <UD>
     b9a:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <UD+0x1>
     b9e:	81 32       	cpi	r24, 0x21	; 33
     ba0:	93 40       	sbci	r25, 0x03	; 3
     ba2:	08 f4       	brcc	.+2      	; 0xba6 <ss+0x264>
				LCD_ClearScreen();
     ba4:	6c c6       	rjmp	.+3288   	; 0x187e <ss+0xf3c>
     ba6:	22 db       	rcall	.-2492   	; 0x1ec <LCD_ClearScreen>
				stater = CALIB_SUN;
			}
			if (DOWN && control == 4) {
     ba8:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <LR>
     bac:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <LR+0x1>
     bb0:	83 35       	cpi	r24, 0x53	; 83
     bb2:	93 40       	sbci	r25, 0x03	; 3
     bb4:	08 f4       	brcc	.+2      	; 0xbb8 <ss+0x276>
     bb6:	ac c3       	rjmp	.+1880   	; 0x1310 <ss+0x9ce>
     bb8:	6a c6       	rjmp	.+3284   	; 0x188e <ss+0xf4c>
     bba:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <LR>
     bbe:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <LR+0x1>
     bc2:	83 35       	cpi	r24, 0x53	; 83
     bc4:	93 40       	sbci	r25, 0x03	; 3
     bc6:	08 f4       	brcc	.+2      	; 0xbca <ss+0x288>
     bc8:	e3 c2       	rjmp	.+1478   	; 0x1190 <ss+0x84e>
     bca:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <control>
     bce:	84 30       	cpi	r24, 0x04	; 4
     bd0:	09 f0       	breq	.+2      	; 0xbd4 <ss+0x292>
				LCD_ClearScreen();
				stater = CALIB_MS;
			}
			if (control == 5 && RIGHT) {
				LCD_ClearScreen();
				stater = CALIB_SUN;
     bd2:	06 c6       	rjmp	.+3084   	; 0x17e0 <ss+0xe9e>
     bd4:	02 c0       	rjmp	.+4      	; 0xbda <ss+0x298>
			}
			if (DOWN && control == 4) {
				LCD_ClearScreen();
     bd6:	c8 e0       	ldi	r28, 0x08	; 8
     bd8:	d0 e0       	ldi	r29, 0x00	; 0
				control = 5;
     bda:	08 db       	rcall	.-2544   	; 0x1ec <LCD_ClearScreen>
     bdc:	85 e0       	ldi	r24, 0x05	; 5
     bde:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <control>
			}
			break;
			
		case GLANCE1:
			if (UP || DOWN) {
     be2:	06 c6       	rjmp	.+3084   	; 0x17f0 <ss+0xeae>
     be4:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <LR>
     be8:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <LR+0x1>
     bec:	86 59       	subi	r24, 0x96	; 150
     bee:	91 09       	sbc	r25, r1
     bf0:	8d 3b       	cpi	r24, 0xBD	; 189
				LCD_ClearScreen();
     bf2:	92 40       	sbci	r25, 0x02	; 2
     bf4:	10 f0       	brcs	.+4      	; 0xbfa <ss+0x2b8>
				stater = GLANCE2;
			}
			else if (LEFT) {
     bf6:	fa da       	rcall	.-2572   	; 0x1ec <LCD_ClearScreen>
     bf8:	5b c3       	rjmp	.+1718   	; 0x12b0 <ss+0x96e>
     bfa:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <UD>
     bfe:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <UD+0x1>
     c02:	86 39       	cpi	r24, 0x96	; 150
				LCD_ClearScreen();
     c04:	91 05       	cpc	r25, r1
     c06:	08 f0       	brcs	.+2      	; 0xc0a <ss+0x2c8>
     c08:	32 c3       	rjmp	.+1636   	; 0x126e <ss+0x92c>
				stater = MAIN2;
			}
			break;
			
		case GLANCE2:
			if (UP || DOWN) {
     c0a:	f0 da       	rcall	.-2592   	; 0x1ec <LCD_ClearScreen>
     c0c:	03 c3       	rjmp	.+1542   	; 0x1214 <ss+0x8d2>
     c0e:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <LR>
     c12:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <LR+0x1>
     c16:	86 59       	subi	r24, 0x96	; 150
     c18:	91 09       	sbc	r25, r1
				LCD_ClearScreen();
     c1a:	8d 3b       	cpi	r24, 0xBD	; 189
     c1c:	92 40       	sbci	r25, 0x02	; 2
     c1e:	10 f0       	brcs	.+4      	; 0xc24 <ss+0x2e2>
				stater = GLANCE1;
			}
			else if (LEFT) {
     c20:	e5 da       	rcall	.-2614   	; 0x1ec <LCD_ClearScreen>
     c22:	25 c3       	rjmp	.+1610   	; 0x126e <ss+0x92c>
     c24:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <UD>
     c28:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <UD+0x1>
     c2c:	86 39       	cpi	r24, 0x96	; 150
				LCD_ClearScreen();
     c2e:	91 05       	cpc	r25, r1
     c30:	08 f0       	brcs	.+2      	; 0xc34 <ss+0x2f2>
     c32:	3e c3       	rjmp	.+1660   	; 0x12b0 <ss+0x96e>
				stater = MAIN2;
			}
			break;
		
		case TAKE_READING:
			if (UP) {
     c34:	db da       	rcall	.-2634   	; 0x1ec <LCD_ClearScreen>
     c36:	ee c2       	rjmp	.+1500   	; 0x1214 <ss+0x8d2>
     c38:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <LR>
     c3c:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <LR+0x1>
     c40:	86 39       	cpi	r24, 0x96	; 150
				LCD_ClearScreen();
     c42:	91 05       	cpc	r25, r1
     c44:	08 f0       	brcs	.+2      	; 0xc48 <ss+0x306>
				control = 0;
     c46:	c3 c5       	rjmp	.+2950   	; 0x17ce <ss+0xe8c>
     c48:	d1 da       	rcall	.-2654   	; 0x1ec <LCD_ClearScreen>
				stater = MAIN1;
			}
			if (LEFT) {
     c4a:	10 92 b2 03 	sts	0x03B2, r1	; 0x8003b2 <control>
     c4e:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <UD>
     c52:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <UD+0x1>
     c56:	86 39       	cpi	r24, 0x96	; 150
				LCD_ClearScreen();
     c58:	91 05       	cpc	r25, r1
     c5a:	08 f0       	brcs	.+2      	; 0xc5e <ss+0x31c>
     c5c:	b2 c2       	rjmp	.+1380   	; 0x11c2 <ss+0x880>
				stater = MAIN2;
			}
			break;
			
		case CALIB_SUN:
			if (UP) {
     c5e:	c6 da       	rcall	.-2676   	; 0x1ec <LCD_ClearScreen>
     c60:	d9 c2       	rjmp	.+1458   	; 0x1214 <ss+0x8d2>
     c62:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <LR>
     c66:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <LR+0x1>
				LCD_ClearScreen();
     c6a:	86 39       	cpi	r24, 0x96	; 150
     c6c:	91 05       	cpc	r25, r1
				control = 0;
     c6e:	28 f4       	brcc	.+10     	; 0xc7a <ss+0x338>
     c70:	bd da       	rcall	.-2694   	; 0x1ec <LCD_ClearScreen>
				stater = MAIN1;
     c72:	10 92 b2 03 	sts	0x03B2, r1	; 0x8003b2 <control>
			}
			if (LEFT) {
     c76:	c2 e0       	ldi	r28, 0x02	; 2
     c78:	d0 e0       	ldi	r29, 0x00	; 0
     c7a:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <UD>
     c7e:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <UD+0x1>
				LCD_ClearScreen();
     c82:	86 39       	cpi	r24, 0x96	; 150
     c84:	91 05       	cpc	r25, r1
				stater = MAIN3;
			}
			if (RIGHT) {
     c86:	50 f4       	brcc	.+20     	; 0xc9c <ss+0x35a>
     c88:	b1 da       	rcall	.-2718   	; 0x1ec <LCD_ClearScreen>
     c8a:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <UD>
     c8e:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <UD+0x1>
     c92:	81 32       	cpi	r24, 0x21	; 33
     c94:	93 40       	sbci	r25, 0x03	; 3
     c96:	08 f4       	brcc	.+2      	; 0xc9a <ss+0x358>
     c98:	d3 c2       	rjmp	.+1446   	; 0x1240 <ss+0x8fe>
     c9a:	04 c0       	rjmp	.+8      	; 0xca4 <ss+0x362>
     c9c:	81 32       	cpi	r24, 0x21	; 33
				LCD_ClearScreen();
     c9e:	93 40       	sbci	r25, 0x03	; 3
     ca0:	08 f4       	brcc	.+2      	; 0xca4 <ss+0x362>
     ca2:	76 c2       	rjmp	.+1260   	; 0x1190 <ss+0x84e>
				stater = CALIB_SUN2;
			}
			break;
			
		case CALIB_SUN2:
			if (RIGHT) {
     ca4:	a3 da       	rcall	.-2746   	; 0x1ec <LCD_ClearScreen>
     ca6:	3c c3       	rjmp	.+1656   	; 0x1320 <ss+0x9de>
     ca8:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <UD>
     cac:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <UD+0x1>
     cb0:	81 32       	cpi	r24, 0x21	; 33
				LCD_ClearScreen();
     cb2:	93 40       	sbci	r25, 0x03	; 3
				control = 0;
     cb4:	28 f0       	brcs	.+10     	; 0xcc0 <ss+0x37e>
     cb6:	9a da       	rcall	.-2764   	; 0x1ec <LCD_ClearScreen>
				stater = WRITE_SUN;
     cb8:	10 92 b2 03 	sts	0x03B2, r1	; 0x8003b2 <control>
			}
			if (LEFT) {
     cbc:	c6 e1       	ldi	r28, 0x16	; 22
     cbe:	d0 e0       	ldi	r29, 0x00	; 0
     cc0:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <UD>
     cc4:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <UD+0x1>
				LCD_ClearScreen();
     cc8:	86 39       	cpi	r24, 0x96	; 150
     cca:	91 05       	cpc	r25, r1
				stater = CALIB_SUN;
			}
			if (UP) {
     ccc:	50 f4       	brcc	.+20     	; 0xce2 <ss+0x3a0>
     cce:	8e da       	rcall	.-2788   	; 0x1ec <LCD_ClearScreen>
     cd0:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <LR>
     cd4:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <LR+0x1>
     cd8:	86 39       	cpi	r24, 0x96	; 150
     cda:	91 05       	cpc	r25, r1
     cdc:	08 f0       	brcs	.+2      	; 0xce0 <ss+0x39e>
     cde:	18 c3       	rjmp	.+1584   	; 0x1310 <ss+0x9ce>
     ce0:	08 c0       	rjmp	.+16     	; 0xcf2 <ss+0x3b0>
     ce2:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <LR>
     ce6:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <LR+0x1>
     cea:	86 39       	cpi	r24, 0x96	; 150
				LCD_ClearScreen();
     cec:	91 05       	cpc	r25, r1
     cee:	08 f0       	brcs	.+2      	; 0xcf2 <ss+0x3b0>
				control = 0;
     cf0:	4f c2       	rjmp	.+1182   	; 0x1190 <ss+0x84e>
     cf2:	7c da       	rcall	.-2824   	; 0x1ec <LCD_ClearScreen>
     cf4:	10 92 b2 03 	sts	0x03B2, r1	; 0x8003b2 <control>
				stater = MAIN1;
			}
			break;
			
		case CALIB_MS:
			if (UP) {
     cf8:	64 c2       	rjmp	.+1224   	; 0x11c2 <ss+0x880>
     cfa:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <LR>
     cfe:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <LR+0x1>
				LCD_ClearScreen();
     d02:	86 39       	cpi	r24, 0x96	; 150
     d04:	91 05       	cpc	r25, r1
				control = 0;
     d06:	28 f4       	brcc	.+10     	; 0xd12 <ss+0x3d0>
     d08:	71 da       	rcall	.-2846   	; 0x1ec <LCD_ClearScreen>
				stater = MAIN1;
     d0a:	10 92 b2 03 	sts	0x03B2, r1	; 0x8003b2 <control>
			}
			if (LEFT) {
     d0e:	c2 e0       	ldi	r28, 0x02	; 2
     d10:	d0 e0       	ldi	r29, 0x00	; 0
     d12:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <UD>
     d16:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <UD+0x1>
				LCD_ClearScreen();
     d1a:	86 39       	cpi	r24, 0x96	; 150
     d1c:	91 05       	cpc	r25, r1
				control = 4;
     d1e:	68 f4       	brcc	.+26     	; 0xd3a <ss+0x3f8>
     d20:	65 da       	rcall	.-2870   	; 0x1ec <LCD_ClearScreen>
				stater = MAIN3;
			}
			if (RIGHT) {
     d22:	84 e0       	ldi	r24, 0x04	; 4
     d24:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <control>
     d28:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <UD>
     d2c:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <UD+0x1>
     d30:	81 32       	cpi	r24, 0x21	; 33
     d32:	93 40       	sbci	r25, 0x03	; 3
     d34:	08 f4       	brcc	.+2      	; 0xd38 <ss+0x3f6>
     d36:	88 c2       	rjmp	.+1296   	; 0x1248 <ss+0x906>
     d38:	04 c0       	rjmp	.+8      	; 0xd42 <ss+0x400>
     d3a:	81 32       	cpi	r24, 0x21	; 33
				LCD_ClearScreen();
     d3c:	93 40       	sbci	r25, 0x03	; 3
     d3e:	08 f4       	brcc	.+2      	; 0xd42 <ss+0x400>
				stater = CALIB_MS2;
			}
			break;
			
		case CALIB_MS2:
			if (RIGHT) {
     d40:	27 c2       	rjmp	.+1102   	; 0x1190 <ss+0x84e>
     d42:	54 da       	rcall	.-2904   	; 0x1ec <LCD_ClearScreen>
     d44:	0c c3       	rjmp	.+1560   	; 0x135e <ss+0xa1c>
     d46:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <UD>
     d4a:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <UD+0x1>
				LCD_ClearScreen();
     d4e:	81 32       	cpi	r24, 0x21	; 33
     d50:	93 40       	sbci	r25, 0x03	; 3
				stater = WRITE_MS;
     d52:	18 f0       	brcs	.+6      	; 0xd5a <ss+0x418>
     d54:	4b da       	rcall	.-2922   	; 0x1ec <LCD_ClearScreen>
			}
			if (LEFT) {
     d56:	c5 e1       	ldi	r28, 0x15	; 21
     d58:	d0 e0       	ldi	r29, 0x00	; 0
     d5a:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <UD>
     d5e:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <UD+0x1>
     d62:	86 39       	cpi	r24, 0x96	; 150
				LCD_ClearScreen();
     d64:	91 05       	cpc	r25, r1
     d66:	50 f4       	brcc	.+20     	; 0xd7c <ss+0x43a>
				stater = CALIB_MS;
			}
			if (UP) {
     d68:	41 da       	rcall	.-2942   	; 0x1ec <LCD_ClearScreen>
     d6a:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <LR>
     d6e:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <LR+0x1>
     d72:	86 39       	cpi	r24, 0x96	; 150
     d74:	91 05       	cpc	r25, r1
     d76:	08 f0       	brcs	.+2      	; 0xd7a <ss+0x438>
     d78:	ea c2       	rjmp	.+1492   	; 0x134e <ss+0xa0c>
     d7a:	08 c0       	rjmp	.+16     	; 0xd8c <ss+0x44a>
     d7c:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <LR>
     d80:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <LR+0x1>
     d84:	86 39       	cpi	r24, 0x96	; 150
				LCD_ClearScreen();
     d86:	91 05       	cpc	r25, r1
     d88:	08 f0       	brcs	.+2      	; 0xd8c <ss+0x44a>
				control = 0;
     d8a:	02 c2       	rjmp	.+1028   	; 0x1190 <ss+0x84e>
     d8c:	2f da       	rcall	.-2978   	; 0x1ec <LCD_ClearScreen>
     d8e:	10 92 b2 03 	sts	0x03B2, r1	; 0x8003b2 <control>
				stater = MAIN1;
			}
			break;
			
		case WRITE_MS:
			control = 0;
     d92:	17 c2       	rjmp	.+1070   	; 0x11c2 <ss+0x880>
			stater = MAIN1;
			break;
     d94:	10 92 b2 03 	sts	0x03B2, r1	; 0x8003b2 <control>
			
		case WRITE_SUN:
			control = 0;
     d98:	14 c2       	rjmp	.+1064   	; 0x11c2 <ss+0x880>
			stater = MAIN1;
			break;
     d9a:	10 92 b2 03 	sts	0x03B2, r1	; 0x8003b2 <control>
			
		case UPDATE_PROFILE:
			control = 0;
     d9e:	11 c2       	rjmp	.+1058   	; 0x11c2 <ss+0x880>
			stater = MAIN1;
			break;
     da0:	10 92 b2 03 	sts	0x03B2, r1	; 0x8003b2 <control>
		
		case READFROM:
			if (RIGHT && gotit == 1) {
     da4:	0e c2       	rjmp	.+1052   	; 0x11c2 <ss+0x880>
     da6:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <UD>
     daa:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <UD+0x1>
     dae:	81 32       	cpi	r24, 0x21	; 33
     db0:	93 40       	sbci	r25, 0x03	; 3
     db2:	48 f0       	brcs	.+18     	; 0xdc6 <ss+0x484>
     db4:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <gotit>
				gotit = 0;
     db8:	81 30       	cpi	r24, 0x01	; 1
				LCD_ClearScreen();
     dba:	29 f4       	brne	.+10     	; 0xdc6 <ss+0x484>
     dbc:	10 92 c0 03 	sts	0x03C0, r1	; 0x8003c0 <gotit>
				stater = RETRIEVE;
			}
			if (UP) {
     dc0:	15 da       	rcall	.-3030   	; 0x1ec <LCD_ClearScreen>
     dc2:	c8 e1       	ldi	r28, 0x18	; 24
     dc4:	d0 e0       	ldi	r29, 0x00	; 0
     dc6:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <LR>
     dca:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <LR+0x1>
				LCD_ClearScreen();
     dce:	86 39       	cpi	r24, 0x96	; 150
     dd0:	91 05       	cpc	r25, r1
				control = 0;
     dd2:	60 f4       	brcc	.+24     	; 0xdec <ss+0x4aa>
				stater = MAIN1;
			}
			if (LEFT) {
     dd4:	0b da       	rcall	.-3050   	; 0x1ec <LCD_ClearScreen>
     dd6:	10 92 b2 03 	sts	0x03B2, r1	; 0x8003b2 <control>
     dda:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <UD>
     dde:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <UD+0x1>
     de2:	86 39       	cpi	r24, 0x96	; 150
     de4:	91 05       	cpc	r25, r1
     de6:	08 f0       	brcs	.+2      	; 0xdea <ss+0x4a8>
     de8:	ec c1       	rjmp	.+984    	; 0x11c2 <ss+0x880>
     dea:	08 c0       	rjmp	.+16     	; 0xdfc <ss+0x4ba>
     dec:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <UD>
     df0:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <UD+0x1>
				LCD_ClearScreen();
     df4:	86 39       	cpi	r24, 0x96	; 150
     df6:	91 05       	cpc	r25, r1
				control = 1;
     df8:	08 f0       	brcs	.+2      	; 0xdfc <ss+0x4ba>
     dfa:	ca c1       	rjmp	.+916    	; 0x1190 <ss+0x84e>
     dfc:	f7 d9       	rcall	.-3090   	; 0x1ec <LCD_ClearScreen>
     dfe:	81 e0       	ldi	r24, 0x01	; 1
		case RETRIEVE:
			stater = SETTING1;
			break;
		
		case SETTING1:
			if (UP) {
     e00:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <control>
     e04:	e8 c1       	rjmp	.+976    	; 0x11d6 <ss+0x894>
     e06:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <LR>
     e0a:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <LR+0x1>
				LCD_ClearScreen();
     e0e:	86 39       	cpi	r24, 0x96	; 150
				stater = SETTING4;
     e10:	91 05       	cpc	r25, r1
     e12:	18 f4       	brcc	.+6      	; 0xe1a <ss+0x4d8>
			}
			if (DOWN) {
     e14:	eb d9       	rcall	.-3114   	; 0x1ec <LCD_ClearScreen>
     e16:	cc e1       	ldi	r28, 0x1C	; 28
     e18:	d0 e0       	ldi	r29, 0x00	; 0
     e1a:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <LR>
     e1e:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <LR+0x1>
				LCD_ClearScreen();
     e22:	83 35       	cpi	r24, 0x53	; 83
				stater = SETTING2;
			}
			if (LEFT) {
     e24:	93 40       	sbci	r25, 0x03	; 3
     e26:	50 f0       	brcs	.+20     	; 0xe3c <ss+0x4fa>
     e28:	e1 d9       	rcall	.-3134   	; 0x1ec <LCD_ClearScreen>
     e2a:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <UD>
     e2e:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <UD+0x1>
     e32:	86 39       	cpi	r24, 0x96	; 150
     e34:	91 05       	cpc	r25, r1
     e36:	08 f0       	brcs	.+2      	; 0xe3a <ss+0x4f8>
     e38:	09 c3       	rjmp	.+1554   	; 0x144c <ss+0xb0a>
     e3a:	08 c0       	rjmp	.+16     	; 0xe4c <ss+0x50a>
     e3c:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <UD>
     e40:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <UD+0x1>
				LCD_ClearScreen();
     e44:	86 39       	cpi	r24, 0x96	; 150
     e46:	91 05       	cpc	r25, r1
				control = 0;
     e48:	08 f0       	brcs	.+2      	; 0xe4c <ss+0x50a>
     e4a:	a2 c1       	rjmp	.+836    	; 0x1190 <ss+0x84e>
     e4c:	cf d9       	rcall	.-3170   	; 0x1ec <LCD_ClearScreen>
				stater = MAIN1;
			}
			break;
			
		case SETTING2:
			if (UP) {
     e4e:	10 92 b2 03 	sts	0x03B2, r1	; 0x8003b2 <control>
     e52:	b7 c1       	rjmp	.+878    	; 0x11c2 <ss+0x880>
     e54:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <LR>
     e58:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <LR+0x1>
				LCD_ClearScreen();
     e5c:	86 39       	cpi	r24, 0x96	; 150
				stater = SETTING1;
     e5e:	91 05       	cpc	r25, r1
     e60:	18 f4       	brcc	.+6      	; 0xe68 <ss+0x526>
			}
			if (DOWN) {
     e62:	c4 d9       	rcall	.-3192   	; 0x1ec <LCD_ClearScreen>
     e64:	c9 e1       	ldi	r28, 0x19	; 25
     e66:	d0 e0       	ldi	r29, 0x00	; 0
     e68:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <LR>
     e6c:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <LR+0x1>
				LCD_ClearScreen();
     e70:	83 35       	cpi	r24, 0x53	; 83
				stater = SETTING3;
			}
			if (LEFT) {
     e72:	93 40       	sbci	r25, 0x03	; 3
     e74:	50 f0       	brcs	.+20     	; 0xe8a <ss+0x548>
     e76:	ba d9       	rcall	.-3212   	; 0x1ec <LCD_ClearScreen>
     e78:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <UD>
     e7c:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <UD+0x1>
     e80:	86 39       	cpi	r24, 0x96	; 150
     e82:	91 05       	cpc	r25, r1
     e84:	08 f0       	brcs	.+2      	; 0xe88 <ss+0x546>
     e86:	f8 c2       	rjmp	.+1520   	; 0x1478 <ss+0xb36>
     e88:	08 c0       	rjmp	.+16     	; 0xe9a <ss+0x558>
     e8a:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <UD>
     e8e:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <UD+0x1>
				LCD_ClearScreen();
     e92:	86 39       	cpi	r24, 0x96	; 150
     e94:	91 05       	cpc	r25, r1
				control = 0;
     e96:	08 f0       	brcs	.+2      	; 0xe9a <ss+0x558>
     e98:	7b c1       	rjmp	.+758    	; 0x1190 <ss+0x84e>
				stater = MAIN1;
			}
			break;

		case SETTING3:
			if (UP) {
     e9a:	a8 d9       	rcall	.-3248   	; 0x1ec <LCD_ClearScreen>
     e9c:	10 92 b2 03 	sts	0x03B2, r1	; 0x8003b2 <control>
     ea0:	90 c1       	rjmp	.+800    	; 0x11c2 <ss+0x880>
     ea2:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <LR>
     ea6:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <LR+0x1>
				LCD_ClearScreen();
				stater = SETTING2;
     eaa:	86 39       	cpi	r24, 0x96	; 150
     eac:	91 05       	cpc	r25, r1
			}
			if (DOWN) {
     eae:	18 f4       	brcc	.+6      	; 0xeb6 <ss+0x574>
     eb0:	9d d9       	rcall	.-3270   	; 0x1ec <LCD_ClearScreen>
     eb2:	ca e1       	ldi	r28, 0x1A	; 26
     eb4:	d0 e0       	ldi	r29, 0x00	; 0
     eb6:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <LR>
     eba:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <LR+0x1>
				LCD_ClearScreen();
     ebe:	83 35       	cpi	r24, 0x53	; 83
				stater = SETTING4;
			}
			if (LEFT) {
     ec0:	93 40       	sbci	r25, 0x03	; 3
     ec2:	50 f0       	brcs	.+20     	; 0xed8 <ss+0x596>
     ec4:	93 d9       	rcall	.-3290   	; 0x1ec <LCD_ClearScreen>
     ec6:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <UD>
     eca:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <UD+0x1>
     ece:	86 39       	cpi	r24, 0x96	; 150
     ed0:	91 05       	cpc	r25, r1
     ed2:	08 f0       	brcs	.+2      	; 0xed6 <ss+0x594>
     ed4:	df c2       	rjmp	.+1470   	; 0x1494 <ss+0xb52>
     ed6:	08 c0       	rjmp	.+16     	; 0xee8 <ss+0x5a6>
     ed8:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <UD>
     edc:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <UD+0x1>
				LCD_ClearScreen();
     ee0:	86 39       	cpi	r24, 0x96	; 150
     ee2:	91 05       	cpc	r25, r1
				control = 0;
     ee4:	08 f0       	brcs	.+2      	; 0xee8 <ss+0x5a6>
     ee6:	54 c1       	rjmp	.+680    	; 0x1190 <ss+0x84e>
     ee8:	81 d9       	rcall	.-3326   	; 0x1ec <LCD_ClearScreen>
				stater = MAIN1;
			}
			break;
			
		case SETTING4:
			if (UP) {
     eea:	10 92 b2 03 	sts	0x03B2, r1	; 0x8003b2 <control>
     eee:	69 c1       	rjmp	.+722    	; 0x11c2 <ss+0x880>
     ef0:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <LR>
     ef4:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <LR+0x1>
				LCD_ClearScreen();
     ef8:	86 39       	cpi	r24, 0x96	; 150
				stater = SETTING3;
     efa:	91 05       	cpc	r25, r1
     efc:	18 f4       	brcc	.+6      	; 0xf04 <ss+0x5c2>
			}
			if (DOWN) {
     efe:	76 d9       	rcall	.-3348   	; 0x1ec <LCD_ClearScreen>
     f00:	cb e1       	ldi	r28, 0x1B	; 27
     f02:	d0 e0       	ldi	r29, 0x00	; 0
     f04:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <LR>
     f08:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <LR+0x1>
				LCD_ClearScreen();
     f0c:	83 35       	cpi	r24, 0x53	; 83
     f0e:	93 40       	sbci	r25, 0x03	; 3
				stater = SETTING1;
			}
			if (LEFT) {
     f10:	50 f0       	brcs	.+20     	; 0xf26 <ss+0x5e4>
     f12:	6c d9       	rcall	.-3368   	; 0x1ec <LCD_ClearScreen>
     f14:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <UD>
     f18:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <UD+0x1>
     f1c:	86 39       	cpi	r24, 0x96	; 150
     f1e:	91 05       	cpc	r25, r1
     f20:	08 f0       	brcs	.+2      	; 0xf24 <ss+0x5e2>
     f22:	79 c2       	rjmp	.+1266   	; 0x1416 <ss+0xad4>
     f24:	08 c0       	rjmp	.+16     	; 0xf36 <ss+0x5f4>
     f26:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <UD>
     f2a:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <UD+0x1>
     f2e:	86 39       	cpi	r24, 0x96	; 150
				LCD_ClearScreen();
     f30:	91 05       	cpc	r25, r1
     f32:	08 f0       	brcs	.+2      	; 0xf36 <ss+0x5f4>
				control = 0;
     f34:	2d c1       	rjmp	.+602    	; 0x1190 <ss+0x84e>
     f36:	5a d9       	rcall	.-3404   	; 0x1ec <LCD_ClearScreen>
     f38:	10 92 b2 03 	sts	0x03B2, r1	; 0x8003b2 <control>
				stater = MAIN1;
			}
			break;
			
		case Q1:
			if (RIGHT && gotit == 1) {
     f3c:	42 c1       	rjmp	.+644    	; 0x11c2 <ss+0x880>
     f3e:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <UD>
     f42:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <UD+0x1>
     f46:	81 32       	cpi	r24, 0x21	; 33
     f48:	93 40       	sbci	r25, 0x03	; 3
     f4a:	78 f0       	brcs	.+30     	; 0xf6a <ss+0x628>
     f4c:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <gotit>
				gotit = 0;
     f50:	81 30       	cpi	r24, 0x01	; 1
				LCD_ClearScreen();
     f52:	59 f4       	brne	.+22     	; 0xf6a <ss+0x628>
     f54:	10 92 c0 03 	sts	0x03C0, r1	; 0x8003c0 <gotit>
				answer = " ";
     f58:	49 d9       	rcall	.-3438   	; 0x1ec <LCD_ClearScreen>
     f5a:	8b e1       	ldi	r24, 0x1B	; 27
     f5c:	91 e0       	ldi	r25, 0x01	; 1
     f5e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
				stater = Q2;
     f62:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			}
			if (LEFT || UP) {
     f66:	ce e0       	ldi	r28, 0x0E	; 14
     f68:	d0 e0       	ldi	r29, 0x00	; 0
     f6a:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <UD>
     f6e:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <UD+0x1>
     f72:	86 39       	cpi	r24, 0x96	; 150
     f74:	91 05       	cpc	r25, r1
     f76:	40 f0       	brcs	.+16     	; 0xf88 <ss+0x646>
     f78:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <LR>
     f7c:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <LR+0x1>
				LCD_ClearScreen();
     f80:	86 39       	cpi	r24, 0x96	; 150
     f82:	91 05       	cpc	r25, r1
				answer = " ";
     f84:	08 f0       	brcs	.+2      	; 0xf88 <ss+0x646>
     f86:	04 c1       	rjmp	.+520    	; 0x1190 <ss+0x84e>
     f88:	31 d9       	rcall	.-3486   	; 0x1ec <LCD_ClearScreen>
     f8a:	8b e1       	ldi	r24, 0x1B	; 27
     f8c:	91 e0       	ldi	r25, 0x01	; 1
				control = 0;
     f8e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     f92:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
				stater = MAIN1;
			}
			break;
			
		case Q2:
			if (RIGHT && gotit == 1) {
     f96:	10 92 b2 03 	sts	0x03B2, r1	; 0x8003b2 <control>
     f9a:	13 c1       	rjmp	.+550    	; 0x11c2 <ss+0x880>
     f9c:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <UD>
     fa0:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <UD+0x1>
     fa4:	81 32       	cpi	r24, 0x21	; 33
     fa6:	93 40       	sbci	r25, 0x03	; 3
				gotit = 0;
     fa8:	48 f0       	brcs	.+18     	; 0xfbc <ss+0x67a>
     faa:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <gotit>
				LCD_ClearScreen();
     fae:	81 30       	cpi	r24, 0x01	; 1
				stater = Q3_1;
     fb0:	29 f4       	brne	.+10     	; 0xfbc <ss+0x67a>
     fb2:	10 92 c0 03 	sts	0x03C0, r1	; 0x8003c0 <gotit>
			}
			if (LEFT) {
     fb6:	1a d9       	rcall	.-3532   	; 0x1ec <LCD_ClearScreen>
     fb8:	cf e0       	ldi	r28, 0x0F	; 15
     fba:	d0 e0       	ldi	r29, 0x00	; 0
     fbc:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <UD>
     fc0:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <UD+0x1>
				LCD_ClearScreen();
				stater = Q1;
			}
			if (UP) {
     fc4:	86 39       	cpi	r24, 0x96	; 150
     fc6:	91 05       	cpc	r25, r1
     fc8:	50 f4       	brcc	.+20     	; 0xfde <ss+0x69c>
     fca:	10 d9       	rcall	.-3552   	; 0x1ec <LCD_ClearScreen>
     fcc:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <LR>
     fd0:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <LR+0x1>
     fd4:	86 39       	cpi	r24, 0x96	; 150
     fd6:	91 05       	cpc	r25, r1
     fd8:	08 f0       	brcs	.+2      	; 0xfdc <ss+0x69a>
     fda:	6a c2       	rjmp	.+1236   	; 0x14b0 <ss+0xb6e>
     fdc:	08 c0       	rjmp	.+16     	; 0xfee <ss+0x6ac>
     fde:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <LR>
     fe2:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <LR+0x1>
				LCD_ClearScreen();
     fe6:	86 39       	cpi	r24, 0x96	; 150
				control = 0;
     fe8:	91 05       	cpc	r25, r1
     fea:	08 f0       	brcs	.+2      	; 0xfee <ss+0x6ac>
				stater = MAIN1;
			}
			break;
		
		case Q3_1:
			if (RIGHT) {
     fec:	d1 c0       	rjmp	.+418    	; 0x1190 <ss+0x84e>
     fee:	fe d8       	rcall	.-3588   	; 0x1ec <LCD_ClearScreen>
     ff0:	10 92 b2 03 	sts	0x03B2, r1	; 0x8003b2 <control>
     ff4:	e6 c0       	rjmp	.+460    	; 0x11c2 <ss+0x880>
     ff6:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <UD>
				LCD_ClearScreen();
     ffa:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <UD+0x1>
				stater = Q3_2;
     ffe:	81 32       	cpi	r24, 0x21	; 33
    1000:	93 40       	sbci	r25, 0x03	; 3
			}
			if (LEFT) {
    1002:	18 f0       	brcs	.+6      	; 0x100a <ss+0x6c8>
    1004:	f3 d8       	rcall	.-3610   	; 0x1ec <LCD_ClearScreen>
    1006:	c0 e1       	ldi	r28, 0x10	; 16
    1008:	d0 e0       	ldi	r29, 0x00	; 0
    100a:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <UD>
				LCD_ClearScreen();
    100e:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <UD+0x1>
				stater = Q2;
			}
			if (UP) {
    1012:	86 39       	cpi	r24, 0x96	; 150
    1014:	91 05       	cpc	r25, r1
    1016:	50 f4       	brcc	.+20     	; 0x102c <ss+0x6ea>
    1018:	e9 d8       	rcall	.-3630   	; 0x1ec <LCD_ClearScreen>
    101a:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <LR>
    101e:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <LR+0x1>
    1022:	86 39       	cpi	r24, 0x96	; 150
    1024:	91 05       	cpc	r25, r1
    1026:	08 f0       	brcs	.+2      	; 0x102a <ss+0x6e8>
    1028:	83 c2       	rjmp	.+1286   	; 0x1530 <ss+0xbee>
    102a:	08 c0       	rjmp	.+16     	; 0x103c <ss+0x6fa>
    102c:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <LR>
    1030:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <LR+0x1>
				LCD_ClearScreen();
    1034:	86 39       	cpi	r24, 0x96	; 150
				control = 0;
    1036:	91 05       	cpc	r25, r1
    1038:	08 f0       	brcs	.+2      	; 0x103c <ss+0x6fa>
    103a:	aa c0       	rjmp	.+340    	; 0x1190 <ss+0x84e>
				stater = MAIN1;
			}
			break;

		case Q3_2:
			if (RIGHT) {
    103c:	d7 d8       	rcall	.-3666   	; 0x1ec <LCD_ClearScreen>
    103e:	10 92 b2 03 	sts	0x03B2, r1	; 0x8003b2 <control>
    1042:	bf c0       	rjmp	.+382    	; 0x11c2 <ss+0x880>
    1044:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <UD>
    1048:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <UD+0x1>
				LCD_ClearScreen();
    104c:	81 32       	cpi	r24, 0x21	; 33
				stater = Q4_1;
    104e:	93 40       	sbci	r25, 0x03	; 3
    1050:	18 f0       	brcs	.+6      	; 0x1058 <ss+0x716>
			}
			if (LEFT) {
    1052:	cc d8       	rcall	.-3688   	; 0x1ec <LCD_ClearScreen>
    1054:	c1 e1       	ldi	r28, 0x11	; 17
    1056:	d0 e0       	ldi	r29, 0x00	; 0
    1058:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <UD>
    105c:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <UD+0x1>
				LCD_ClearScreen();
    1060:	86 39       	cpi	r24, 0x96	; 150
				stater = Q3_1;
			}
			if (UP) {
    1062:	91 05       	cpc	r25, r1
    1064:	50 f4       	brcc	.+20     	; 0x107a <ss+0x738>
    1066:	c2 d8       	rcall	.-3708   	; 0x1ec <LCD_ClearScreen>
    1068:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <LR>
    106c:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <LR+0x1>
    1070:	86 39       	cpi	r24, 0x96	; 150
    1072:	91 05       	cpc	r25, r1
    1074:	08 f0       	brcs	.+2      	; 0x1078 <ss+0x736>
    1076:	a3 c2       	rjmp	.+1350   	; 0x15be <ss+0xc7c>
    1078:	08 c0       	rjmp	.+16     	; 0x108a <ss+0x748>
    107a:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <LR>
    107e:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <LR+0x1>
				LCD_ClearScreen();
    1082:	86 39       	cpi	r24, 0x96	; 150
				control = 0;
    1084:	91 05       	cpc	r25, r1
    1086:	08 f0       	brcs	.+2      	; 0x108a <ss+0x748>
    1088:	83 c0       	rjmp	.+262    	; 0x1190 <ss+0x84e>
				stater = MAIN1;
			}
			break;
			
		case Q4_1:
			if (RIGHT) {
    108a:	b0 d8       	rcall	.-3744   	; 0x1ec <LCD_ClearScreen>
    108c:	10 92 b2 03 	sts	0x03B2, r1	; 0x8003b2 <control>
    1090:	98 c0       	rjmp	.+304    	; 0x11c2 <ss+0x880>
    1092:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <UD>
    1096:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <UD+0x1>
				LCD_ClearScreen();
				stater = Q4_2;
    109a:	81 32       	cpi	r24, 0x21	; 33
    109c:	93 40       	sbci	r25, 0x03	; 3
			}
			if (LEFT) {
    109e:	18 f0       	brcs	.+6      	; 0x10a6 <ss+0x764>
    10a0:	a5 d8       	rcall	.-3766   	; 0x1ec <LCD_ClearScreen>
    10a2:	c2 e1       	ldi	r28, 0x12	; 18
    10a4:	d0 e0       	ldi	r29, 0x00	; 0
    10a6:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <UD>
    10aa:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <UD+0x1>
				LCD_ClearScreen();
    10ae:	86 39       	cpi	r24, 0x96	; 150
				stater = Q3_1;
			}
			if (UP) {
    10b0:	91 05       	cpc	r25, r1
    10b2:	50 f4       	brcc	.+20     	; 0x10c8 <ss+0x786>
    10b4:	9b d8       	rcall	.-3786   	; 0x1ec <LCD_ClearScreen>
    10b6:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <LR>
    10ba:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <LR+0x1>
    10be:	86 39       	cpi	r24, 0x96	; 150
    10c0:	91 05       	cpc	r25, r1
    10c2:	08 f0       	brcs	.+2      	; 0x10c6 <ss+0x784>
    10c4:	7c c2       	rjmp	.+1272   	; 0x15be <ss+0xc7c>
    10c6:	08 c0       	rjmp	.+16     	; 0x10d8 <ss+0x796>
    10c8:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <LR>
    10cc:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <LR+0x1>
				LCD_ClearScreen();
    10d0:	86 39       	cpi	r24, 0x96	; 150
				control = 0;
    10d2:	91 05       	cpc	r25, r1
    10d4:	08 f0       	brcs	.+2      	; 0x10d8 <ss+0x796>
    10d6:	5c c0       	rjmp	.+184    	; 0x1190 <ss+0x84e>
				stater = MAIN1;
			}
			break;
			
		case Q4_2:
			if (RIGHT) {
    10d8:	89 d8       	rcall	.-3822   	; 0x1ec <LCD_ClearScreen>
    10da:	10 92 b2 03 	sts	0x03B2, r1	; 0x8003b2 <control>
    10de:	71 c0       	rjmp	.+226    	; 0x11c2 <ss+0x880>
    10e0:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <UD>
    10e4:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <UD+0x1>
				LCD_ClearScreen();
				stater = CONFIRM;
    10e8:	81 32       	cpi	r24, 0x21	; 33
    10ea:	93 40       	sbci	r25, 0x03	; 3
			}
			if (LEFT) {
    10ec:	18 f0       	brcs	.+6      	; 0x10f4 <ss+0x7b2>
    10ee:	7e d8       	rcall	.-3844   	; 0x1ec <LCD_ClearScreen>
    10f0:	c3 e1       	ldi	r28, 0x13	; 19
    10f2:	d0 e0       	ldi	r29, 0x00	; 0
    10f4:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <UD>
    10f8:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <UD+0x1>
				LCD_ClearScreen();
    10fc:	86 39       	cpi	r24, 0x96	; 150
				stater = Q4_1;
			}
			if (UP) {
    10fe:	91 05       	cpc	r25, r1
    1100:	50 f4       	brcc	.+20     	; 0x1116 <ss+0x7d4>
    1102:	74 d8       	rcall	.-3864   	; 0x1ec <LCD_ClearScreen>
    1104:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <LR>
    1108:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <LR+0x1>
    110c:	86 39       	cpi	r24, 0x96	; 150
    110e:	91 05       	cpc	r25, r1
    1110:	08 f0       	brcs	.+2      	; 0x1114 <ss+0x7d2>
    1112:	74 c2       	rjmp	.+1256   	; 0x15fc <ss+0xcba>
    1114:	07 c0       	rjmp	.+14     	; 0x1124 <ss+0x7e2>
    1116:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <LR>
    111a:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <LR+0x1>
				LCD_ClearScreen();
				control = 0;
    111e:	86 39       	cpi	r24, 0x96	; 150
    1120:	91 05       	cpc	r25, r1
    1122:	b0 f5       	brcc	.+108    	; 0x1190 <ss+0x84e>
				stater = MAIN1;
			}
			break;
			
		case CONFIRM:
			if (RIGHT && memSlot != 0) {
    1124:	63 d8       	rcall	.-3898   	; 0x1ec <LCD_ClearScreen>
    1126:	10 92 b2 03 	sts	0x03B2, r1	; 0x8003b2 <control>
    112a:	4b c0       	rjmp	.+150    	; 0x11c2 <ss+0x880>
    112c:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <UD>
    1130:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <UD+0x1>
    1134:	81 32       	cpi	r24, 0x21	; 33
    1136:	93 40       	sbci	r25, 0x03	; 3
				LCD_ClearScreen();
    1138:	38 f0       	brcs	.+14     	; 0x1148 <ss+0x806>
    113a:	80 91 b8 03 	lds	r24, 0x03B8	; 0x8003b8 <memSlot>
				stater = WRITE;
    113e:	88 23       	and	r24, r24
			}
			if (LEFT) {
    1140:	19 f0       	breq	.+6      	; 0x1148 <ss+0x806>
    1142:	54 d8       	rcall	.-3928   	; 0x1ec <LCD_ClearScreen>
    1144:	c4 e1       	ldi	r28, 0x14	; 20
    1146:	d0 e0       	ldi	r29, 0x00	; 0
    1148:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <UD>
				LCD_ClearScreen();
    114c:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <UD+0x1>
				stater = Q4_2;
			}
			if (UP) {
    1150:	86 39       	cpi	r24, 0x96	; 150
    1152:	91 05       	cpc	r25, r1
    1154:	50 f4       	brcc	.+20     	; 0x116a <ss+0x828>
    1156:	4a d8       	rcall	.-3948   	; 0x1ec <LCD_ClearScreen>
    1158:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <LR>
    115c:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <LR+0x1>
    1160:	86 39       	cpi	r24, 0x96	; 150
    1162:	91 05       	cpc	r25, r1
    1164:	08 f0       	brcs	.+2      	; 0x1168 <ss+0x826>
    1166:	52 c2       	rjmp	.+1188   	; 0x160c <ss+0xcca>
    1168:	07 c0       	rjmp	.+14     	; 0x1178 <ss+0x836>
    116a:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <LR>
				LCD_ClearScreen();
				control = 0;
    116e:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <LR+0x1>
    1172:	86 39       	cpi	r24, 0x96	; 150
				stater = MAIN1;
			}
			break;
			
		case WRITE:
			control = 0;
    1174:	91 05       	cpc	r25, r1
    1176:	60 f4       	brcc	.+24     	; 0x1190 <ss+0x84e>
			stater = MAIN1;
			break;
    1178:	39 d8       	rcall	.-3982   	; 0x1ec <LCD_ClearScreen>
			
		default:
			control = 0;
    117a:	10 92 b2 03 	sts	0x03B2, r1	; 0x8003b2 <control>
			stater = WELCOME;
			break;
    117e:	21 c0       	rjmp	.+66     	; 0x11c2 <ss+0x880>
				stater = MAIN1;
			}
			break;
			
		case RETRIEVE:
			stater = SETTING1;
    1180:	10 92 b2 03 	sts	0x03B2, r1	; 0x8003b2 <control>
			control = 0;
			stater = WELCOME;
			break;
	}
	
	switch(stater) {
    1184:	1e c0       	rjmp	.+60     	; 0x11c2 <ss+0x880>
    1186:	10 92 b2 03 	sts	0x03B2, r1	; 0x8003b2 <control>
    118a:	10 c0       	rjmp	.+32     	; 0x11ac <ss+0x86a>
    118c:	c9 e1       	ldi	r28, 0x19	; 25
    118e:	d0 e0       	ldi	r29, 0x00	; 0
    1190:	cd 31       	cpi	r28, 0x1D	; 29
    1192:	d1 05       	cpc	r29, r1
				control = 2;
			}
			else if (DOWN && control == 3) {
				LCD_ClearScreen();
				control = 4;
				stater = MAIN3;
    1194:	08 f0       	brcs	.+2      	; 0x1198 <ss+0x856>
    1196:	81 c3       	rjmp	.+1794   	; 0x189a <ss+0xf58>
    1198:	fe 01       	movw	r30, r28
    119a:	ed 59       	subi	r30, 0x9D	; 157
    119c:	ff 4f       	sbci	r31, 0xFF	; 255
    119e:	b0 c5       	rjmp	.+2912   	; 0x1d00 <__tablejump2__>
			break;
	}
	
	switch(stater) {
		case WELCOME:
			LCD_DisplayString(1, "   Welcome To   <Leaf of Faith> ");
    11a0:	c2 e3       	ldi	r28, 0x32	; 50
    11a2:	bc c2       	rjmp	.+1400   	; 0x171c <ss+0xdda>
    11a4:	c2 e3       	ldi	r28, 0x32	; 50
    11a6:	a6 c2       	rjmp	.+1356   	; 0x16f4 <ss+0xdb2>
    11a8:	c2 e3       	ldi	r28, 0x32	; 50
			break;
    11aa:	6c c2       	rjmp	.+1240   	; 0x1684 <ss+0xd42>
    11ac:	6d e1       	ldi	r22, 0x1D	; 29
    11ae:	71 e0       	ldi	r23, 0x01	; 1
			
		case MAIN1:
			if (control == 0) {
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	3f d8       	rcall	.-3970   	; 0x232 <LCD_DisplayString>
    11b4:	c0 e0       	ldi	r28, 0x00	; 0
    11b6:	d0 e0       	ldi	r29, 0x00	; 0
				LCD_DisplayString(1, "> Set  Profile    Load Profile");
    11b8:	70 c3       	rjmp	.+1760   	; 0x189a <ss+0xf58>
    11ba:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <control>
    11be:	81 11       	cpse	r24, r1
    11c0:	07 c0       	rjmp	.+14     	; 0x11d0 <ss+0x88e>
    11c2:	6e e3       	ldi	r22, 0x3E	; 62
    11c4:	71 e0       	ldi	r23, 0x01	; 1
    11c6:	81 e0       	ldi	r24, 0x01	; 1
			}
			else if (control == 1) {
    11c8:	34 d8       	rcall	.-3992   	; 0x232 <LCD_DisplayString>
    11ca:	c2 e0       	ldi	r28, 0x02	; 2
    11cc:	d0 e0       	ldi	r29, 0x00	; 0
				LCD_DisplayString(1, "  Set  Profile  > Load Profile");
    11ce:	65 c3       	rjmp	.+1738   	; 0x189a <ss+0xf58>
    11d0:	81 30       	cpi	r24, 0x01	; 1
    11d2:	09 f0       	breq	.+2      	; 0x11d6 <ss+0x894>
    11d4:	b7 c2       	rjmp	.+1390   	; 0x1744 <ss+0xe02>
    11d6:	6d e5       	ldi	r22, 0x5D	; 93
    11d8:	71 e0       	ldi	r23, 0x01	; 1
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	2a d8       	rcall	.-4012   	; 0x232 <LCD_DisplayString>
			}
			break;
			
		case SETTINGS:
			LCD_DisplayString(1, "Enable Scaler?");
    11de:	c2 e0       	ldi	r28, 0x02	; 2
    11e0:	d0 e0       	ldi	r29, 0x00	; 0
    11e2:	5b c3       	rjmp	.+1718   	; 0x189a <ss+0xf58>
    11e4:	6c e7       	ldi	r22, 0x7C	; 124
    11e6:	71 e0       	ldi	r23, 0x01	; 1
			if (enableScaler == 1) {
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	23 d8       	rcall	.-4026   	; 0x232 <LCD_DisplayString>
    11ec:	80 91 b7 03 	lds	r24, 0x03B7	; 0x8003b7 <enableScaler>
				LCD_DisplayString(21, "< Yay >");
    11f0:	81 30       	cpi	r24, 0x01	; 1
    11f2:	39 f4       	brne	.+14     	; 0x1202 <ss+0x8c0>
    11f4:	6b e8       	ldi	r22, 0x8B	; 139
    11f6:	71 e0       	ldi	r23, 0x01	; 1
    11f8:	85 e1       	ldi	r24, 0x15	; 21
    11fa:	1b d8       	rcall	.-4042   	; 0x232 <LCD_DisplayString>
    11fc:	c1 e0       	ldi	r28, 0x01	; 1
    11fe:	d0 e0       	ldi	r29, 0x00	; 0
			}
			else if (enableScaler == 0) {
    1200:	4c c3       	rjmp	.+1688   	; 0x189a <ss+0xf58>
    1202:	81 11       	cpse	r24, r1
				LCD_DisplayString(21, "< Nay >");
    1204:	a2 c2       	rjmp	.+1348   	; 0x174a <ss+0xe08>
    1206:	63 e9       	ldi	r22, 0x93	; 147
    1208:	71 e0       	ldi	r23, 0x01	; 1
    120a:	85 e1       	ldi	r24, 0x15	; 21
    120c:	12 d8       	rcall	.-4060   	; 0x232 <LCD_DisplayString>
    120e:	c1 e0       	ldi	r28, 0x01	; 1
    1210:	d0 e0       	ldi	r29, 0x00	; 0
			}
			break;
						
		case MAIN2:
			if (control == 2) {
    1212:	43 c3       	rjmp	.+1670   	; 0x189a <ss+0xf58>
    1214:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <control>
    1218:	82 30       	cpi	r24, 0x02	; 2
				LCD_DisplayString(1, "> Current Data    At A Glance");
    121a:	39 f4       	brne	.+14     	; 0x122a <ss+0x8e8>
    121c:	6b e9       	ldi	r22, 0x9B	; 155
    121e:	71 e0       	ldi	r23, 0x01	; 1
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	07 d8       	rcall	.-4082   	; 0x232 <LCD_DisplayString>
    1224:	c3 e0       	ldi	r28, 0x03	; 3
    1226:	d0 e0       	ldi	r29, 0x00	; 0
    1228:	38 c3       	rjmp	.+1648   	; 0x189a <ss+0xf58>
			}
			else if (control == 3) {
    122a:	83 30       	cpi	r24, 0x03	; 3
    122c:	09 f0       	breq	.+2      	; 0x1230 <ss+0x8ee>
				LCD_DisplayString(1, "  Current Data  > At A Glance");
    122e:	90 c2       	rjmp	.+1312   	; 0x1750 <ss+0xe0e>
    1230:	69 eb       	ldi	r22, 0xB9	; 185
    1232:	71 e0       	ldi	r23, 0x01	; 1
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	0e 94 19 01 	call	0x232	; 0x232 <LCD_DisplayString>
    123a:	c3 e0       	ldi	r28, 0x03	; 3
			}
			break;

		case MAIN3:
			if (control == 4) {
    123c:	d0 e0       	ldi	r29, 0x00	; 0
    123e:	2d c3       	rjmp	.+1626   	; 0x189a <ss+0xf58>
    1240:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <control>
				LCD_DisplayString(1, "> Calibrate MS    Calibrate Sun");
    1244:	84 30       	cpi	r24, 0x04	; 4
    1246:	41 f4       	brne	.+16     	; 0x1258 <ss+0x916>
    1248:	67 ed       	ldi	r22, 0xD7	; 215
    124a:	71 e0       	ldi	r23, 0x01	; 1
    124c:	81 e0       	ldi	r24, 0x01	; 1
    124e:	0e 94 19 01 	call	0x232	; 0x232 <LCD_DisplayString>
    1252:	c4 e0       	ldi	r28, 0x04	; 4
			}
			else if (control == 5) {
    1254:	d0 e0       	ldi	r29, 0x00	; 0
    1256:	21 c3       	rjmp	.+1602   	; 0x189a <ss+0xf58>
				LCD_DisplayString(1, "  Calibrate MS  > Calibrate Sun");
    1258:	85 30       	cpi	r24, 0x05	; 5
    125a:	09 f0       	breq	.+2      	; 0x125e <ss+0x91c>
    125c:	7c c2       	rjmp	.+1272   	; 0x1756 <ss+0xe14>
    125e:	67 ef       	ldi	r22, 0xF7	; 247
    1260:	71 e0       	ldi	r23, 0x01	; 1
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	0e 94 19 01 	call	0x232	; 0x232 <LCD_DisplayString>
			}
			break;

		case GLANCE1:
			LCD_DisplayString(1, "Daytime h2O:");
    1268:	c4 e0       	ldi	r28, 0x04	; 4
    126a:	d0 e0       	ldi	r29, 0x00	; 0
    126c:	16 c3       	rjmp	.+1580   	; 0x189a <ss+0xf58>
    126e:	67 e1       	ldi	r22, 0x17	; 23
			LCD_DisplayString(17, "Frequency:");
    1270:	72 e0       	ldi	r23, 0x02	; 2
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	0e 94 19 01 	call	0x232	; 0x232 <LCD_DisplayString>
    1278:	64 e2       	ldi	r22, 0x24	; 36
			(plant1.dayTimeWaterOK==1) ? LCD_DisplayString(14, "Yes") : LCD_DisplayString(14, "No");
    127a:	72 e0       	ldi	r23, 0x02	; 2
    127c:	81 e1       	ldi	r24, 0x11	; 17
    127e:	0e 94 19 01 	call	0x232	; 0x232 <LCD_DisplayString>
    1282:	80 91 b9 03 	lds	r24, 0x03B9	; 0x8003b9 <plant1>
    1286:	81 30       	cpi	r24, 0x01	; 1
    1288:	31 f4       	brne	.+12     	; 0x1296 <ss+0x954>
    128a:	6f e2       	ldi	r22, 0x2F	; 47
    128c:	72 e0       	ldi	r23, 0x02	; 2
    128e:	8e e0       	ldi	r24, 0x0E	; 14
    1290:	0e 94 19 01 	call	0x232	; 0x232 <LCD_DisplayString>
    1294:	05 c0       	rjmp	.+10     	; 0x12a0 <ss+0x95e>
			convertToDec(28, plant1.waterFrequency);
    1296:	63 e3       	ldi	r22, 0x33	; 51
    1298:	72 e0       	ldi	r23, 0x02	; 2
    129a:	8e e0       	ldi	r24, 0x0E	; 14
    129c:	0e 94 19 01 	call	0x232	; 0x232 <LCD_DisplayString>
    12a0:	60 91 ba 03 	lds	r22, 0x03BA	; 0x8003ba <plant1+0x1>
			break;
    12a4:	70 e0       	ldi	r23, 0x00	; 0
    12a6:	8c e1       	ldi	r24, 0x1C	; 28

		case GLANCE2:
			LCD_DisplayString(1, "MS:");
    12a8:	c7 da       	rcall	.-2674   	; 0x838 <convertToDec>
    12aa:	c5 e0       	ldi	r28, 0x05	; 5
    12ac:	d0 e0       	ldi	r29, 0x00	; 0
    12ae:	f5 c2       	rjmp	.+1514   	; 0x189a <ss+0xf58>
    12b0:	66 e3       	ldi	r22, 0x36	; 54
			LCD_DisplayString(17, "SL:");
    12b2:	72 e0       	ldi	r23, 0x02	; 2
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	0e 94 19 01 	call	0x232	; 0x232 <LCD_DisplayString>
    12ba:	6a e3       	ldi	r22, 0x3A	; 58
			convertToDec(4, plant1.moisture);
    12bc:	72 e0       	ldi	r23, 0x02	; 2
    12be:	81 e1       	ldi	r24, 0x11	; 17
    12c0:	0e 94 19 01 	call	0x232	; 0x232 <LCD_DisplayString>
    12c4:	c9 eb       	ldi	r28, 0xB9	; 185
    12c6:	d3 e0       	ldi	r29, 0x03	; 3
    12c8:	6a 81       	ldd	r22, Y+2	; 0x02
			convertToDec(20, plant1.sunLevel);
    12ca:	7b 81       	ldd	r23, Y+3	; 0x03
    12cc:	84 e0       	ldi	r24, 0x04	; 4
    12ce:	b4 da       	rcall	.-2712   	; 0x838 <convertToDec>
    12d0:	6c 81       	ldd	r22, Y+4	; 0x04
			break;
    12d2:	7d 81       	ldd	r23, Y+5	; 0x05
    12d4:	84 e1       	ldi	r24, 0x14	; 20
    12d6:	b0 da       	rcall	.-2720   	; 0x838 <convertToDec>
			
		case TAKE_READING:
			LCD_DisplayString(1, "Moisture:");
    12d8:	c6 e0       	ldi	r28, 0x06	; 6
    12da:	d0 e0       	ldi	r29, 0x00	; 0
    12dc:	de c2       	rjmp	.+1468   	; 0x189a <ss+0xf58>
    12de:	6e e3       	ldi	r22, 0x3E	; 62
    12e0:	72 e0       	ldi	r23, 0x02	; 2
			LCD_DisplayString(17, "Sunlight:");
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	0e 94 19 01 	call	0x232	; 0x232 <LCD_DisplayString>
    12e8:	68 e4       	ldi	r22, 0x48	; 72
			convertToDec(11, MS_reading);
    12ea:	72 e0       	ldi	r23, 0x02	; 2
    12ec:	81 e1       	ldi	r24, 0x11	; 17
    12ee:	0e 94 19 01 	call	0x232	; 0x232 <LCD_DisplayString>
    12f2:	60 91 c8 03 	lds	r22, 0x03C8	; 0x8003c8 <MS_reading>
			convertToDec(27, SUN_reading);
    12f6:	70 91 c9 03 	lds	r23, 0x03C9	; 0x8003c9 <MS_reading+0x1>
    12fa:	8b e0       	ldi	r24, 0x0B	; 11
    12fc:	9d da       	rcall	.-2758   	; 0x838 <convertToDec>
    12fe:	60 91 ca 03 	lds	r22, 0x03CA	; 0x8003ca <SUN_reading>
			break;
    1302:	70 91 cb 03 	lds	r23, 0x03CB	; 0x8003cb <SUN_reading+0x1>
			
		case CALIB_SUN:
			LCD_DisplayString(1, "1.Set Photo       Sensor    -->");
    1306:	8b e1       	ldi	r24, 0x1B	; 27
    1308:	97 da       	rcall	.-2770   	; 0x838 <convertToDec>
    130a:	c7 e0       	ldi	r28, 0x07	; 7
    130c:	d0 e0       	ldi	r29, 0x00	; 0
			break;
    130e:	c5 c2       	rjmp	.+1418   	; 0x189a <ss+0xf58>
    1310:	62 e5       	ldi	r22, 0x52	; 82
    1312:	72 e0       	ldi	r23, 0x02	; 2
		
		case CALIB_SUN2:
			LCD_DisplayString(1, "2.Reading: ");
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	0e 94 19 01 	call	0x232	; 0x232 <LCD_DisplayString>
    131a:	c8 e0       	ldi	r28, 0x08	; 8
    131c:	d0 e0       	ldi	r29, 0x00	; 0
			plant1.sunLevel = SUN_reading;
    131e:	bd c2       	rjmp	.+1402   	; 0x189a <ss+0xf58>
    1320:	62 e7       	ldi	r22, 0x72	; 114
    1322:	72 e0       	ldi	r23, 0x02	; 2
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	0e 94 19 01 	call	0x232	; 0x232 <LCD_DisplayString>
    132a:	60 91 ca 03 	lds	r22, 0x03CA	; 0x8003ca <SUN_reading>
			convertToDec(12, SUN_reading);
    132e:	70 91 cb 03 	lds	r23, 0x03CB	; 0x8003cb <SUN_reading+0x1>
			LCD_DisplayString(25, "SAVE -->");
    1332:	70 93 be 03 	sts	0x03BE, r23	; 0x8003be <plant1+0x5>
    1336:	60 93 bd 03 	sts	0x03BD, r22	; 0x8003bd <plant1+0x4>
    133a:	8c e0       	ldi	r24, 0x0C	; 12
			break;
    133c:	7d da       	rcall	.-2822   	; 0x838 <convertToDec>
    133e:	6e e7       	ldi	r22, 0x7E	; 126
    1340:	72 e0       	ldi	r23, 0x02	; 2
			
		case CALIB_MS:
			LCD_DisplayString(1, "1.Place Moisture  Sensor    -->");
    1342:	89 e1       	ldi	r24, 0x19	; 25
    1344:	0e 94 19 01 	call	0x232	; 0x232 <LCD_DisplayString>
    1348:	c9 e0       	ldi	r28, 0x09	; 9
    134a:	d0 e0       	ldi	r29, 0x00	; 0
			break;
    134c:	a6 c2       	rjmp	.+1356   	; 0x189a <ss+0xf58>
    134e:	67 e8       	ldi	r22, 0x87	; 135
    1350:	72 e0       	ldi	r23, 0x02	; 2
			
		case CALIB_MS2:
			LCD_DisplayString(1, "2.Reading: ");
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	0e 94 19 01 	call	0x232	; 0x232 <LCD_DisplayString>
    1358:	ca e0       	ldi	r28, 0x0A	; 10
			plant1.moisture = MS_reading;
    135a:	d0 e0       	ldi	r29, 0x00	; 0
    135c:	9e c2       	rjmp	.+1340   	; 0x189a <ss+0xf58>
    135e:	62 e7       	ldi	r22, 0x72	; 114
    1360:	72 e0       	ldi	r23, 0x02	; 2
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	0e 94 19 01 	call	0x232	; 0x232 <LCD_DisplayString>
    1368:	60 91 c8 03 	lds	r22, 0x03C8	; 0x8003c8 <MS_reading>
			convertToDec(12, MS_reading);
    136c:	70 91 c9 03 	lds	r23, 0x03C9	; 0x8003c9 <MS_reading+0x1>
			LCD_DisplayString(25, "SAVE -->");
    1370:	70 93 bc 03 	sts	0x03BC, r23	; 0x8003bc <plant1+0x3>
    1374:	60 93 bb 03 	sts	0x03BB, r22	; 0x8003bb <plant1+0x2>
    1378:	8c e0       	ldi	r24, 0x0C	; 12
			break;
    137a:	5e da       	rcall	.-2884   	; 0x838 <convertToDec>
    137c:	6e e7       	ldi	r22, 0x7E	; 126
    137e:	72 e0       	ldi	r23, 0x02	; 2
			
		case READFROM:
			LCD_DisplayString(1, "Source Mem Slot 1,2,3,4?:");
    1380:	89 e1       	ldi	r24, 0x19	; 25
    1382:	0e 94 19 01 	call	0x232	; 0x232 <LCD_DisplayString>
    1386:	cb e0       	ldi	r28, 0x0B	; 11
    1388:	d0 e0       	ldi	r29, 0x00	; 0
			if (input1234) {
    138a:	87 c2       	rjmp	.+1294   	; 0x189a <ss+0xf58>
    138c:	67 ea       	ldi	r22, 0xA7	; 167
    138e:	72 e0       	ldi	r23, 0x02	; 2
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	0e 94 19 01 	call	0x232	; 0x232 <LCD_DisplayString>
    1396:	34 d8       	rcall	.-3992   	; 0x400 <GetKeypadKey>
    1398:	81 33       	cpi	r24, 0x31	; 49
    139a:	51 f0       	breq	.+20     	; 0x13b0 <ss+0xa6e>
    139c:	31 d8       	rcall	.-3998   	; 0x400 <GetKeypadKey>
    139e:	82 33       	cpi	r24, 0x32	; 50
    13a0:	39 f0       	breq	.+14     	; 0x13b0 <ss+0xa6e>
    13a2:	2e d8       	rcall	.-4004   	; 0x400 <GetKeypadKey>
    13a4:	83 33       	cpi	r24, 0x33	; 51
    13a6:	21 f0       	breq	.+8      	; 0x13b0 <ss+0xa6e>
    13a8:	2b d8       	rcall	.-4010   	; 0x400 <GetKeypadKey>
    13aa:	84 33       	cpi	r24, 0x34	; 52
				gotit = 1;
    13ac:	09 f0       	breq	.+2      	; 0x13b0 <ss+0xa6e>
    13ae:	d6 c1       	rjmp	.+940    	; 0x175c <ss+0xe1a>
    13b0:	81 e0       	ldi	r24, 0x01	; 1
				LCD_Cursor(27);
    13b2:	80 93 c0 03 	sts	0x03C0, r24	; 0x8003c0 <gotit>
    13b6:	8b e1       	ldi	r24, 0x1B	; 27
				memSlot = GetKeypadKey() - '0';
    13b8:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCD_Cursor>
    13bc:	21 d8       	rcall	.-4030   	; 0x400 <GetKeypadKey>
    13be:	80 53       	subi	r24, 0x30	; 48
    13c0:	80 93 b8 03 	sts	0x03B8, r24	; 0x8003b8 <memSlot>
				LCD_WriteData(memSlot + '0');
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	c0 96       	adiw	r24, 0x30	; 48
    13c8:	0e 94 10 01 	call	0x220	; 0x220 <LCD_WriteData>
    13cc:	c7 e1       	ldi	r28, 0x17	; 23
    13ce:	d0 e0       	ldi	r29, 0x00	; 0
			}
			break;
			
		case RETRIEVE:
			retrievePlantProfile(memSlot);
    13d0:	64 c2       	rjmp	.+1224   	; 0x189a <ss+0xf58>
    13d2:	80 91 b8 03 	lds	r24, 0x03B8	; 0x8003b8 <memSlot>
			if (memSlot == 1) {
    13d6:	cf d9       	rcall	.-3170   	; 0x776 <retrievePlantProfile>
    13d8:	80 91 b8 03 	lds	r24, 0x03B8	; 0x8003b8 <memSlot>
    13dc:	81 30       	cpi	r24, 0x01	; 1
				num = ONE;
    13de:	21 f4       	brne	.+8      	; 0x13e8 <ss+0xaa6>
    13e0:	84 e1       	ldi	r24, 0x14	; 20
    13e2:	80 93 c1 03 	sts	0x03C1, r24	; 0x8003c1 <num>
			}
			else if (memSlot == 2) {
    13e6:	11 c0       	rjmp	.+34     	; 0x140a <ss+0xac8>
    13e8:	82 30       	cpi	r24, 0x02	; 2
				num = TWO;
    13ea:	21 f4       	brne	.+8      	; 0x13f4 <ss+0xab2>
    13ec:	83 eb       	ldi	r24, 0xB3	; 179
    13ee:	80 93 c1 03 	sts	0x03C1, r24	; 0x8003c1 <num>
			}
			else if (memSlot == 3) {
    13f2:	0b c0       	rjmp	.+22     	; 0x140a <ss+0xac8>
				num = THREE;
    13f4:	83 30       	cpi	r24, 0x03	; 3
    13f6:	21 f4       	brne	.+8      	; 0x1400 <ss+0xabe>
    13f8:	86 eb       	ldi	r24, 0xB6	; 182
    13fa:	80 93 c1 03 	sts	0x03C1, r24	; 0x8003c1 <num>
			}
			else if (memSlot == 4) {
    13fe:	05 c0       	rjmp	.+10     	; 0x140a <ss+0xac8>
				num = FOUR;
    1400:	84 30       	cpi	r24, 0x04	; 4
    1402:	19 f4       	brne	.+6      	; 0x140a <ss+0xac8>
    1404:	84 ed       	ldi	r24, 0xD4	; 212
			}
			transmit_data(num);
    1406:	80 93 c1 03 	sts	0x03C1, r24	; 0x8003c1 <num>
    140a:	80 91 c1 03 	lds	r24, 0x03C1	; 0x8003c1 <num>
			break;
    140e:	60 d9       	rcall	.-3392   	; 0x6d0 <transmit_data>
    1410:	c8 e1       	ldi	r28, 0x18	; 24
    1412:	d0 e0       	ldi	r29, 0x00	; 0
			
		case SETTING1:
			LCD_DisplayString(1, "Water During Day");
    1414:	42 c2       	rjmp	.+1156   	; 0x189a <ss+0xf58>
    1416:	61 ec       	ldi	r22, 0xC1	; 193
    1418:	72 e0       	ldi	r23, 0x02	; 2
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	0e 94 19 01 	call	0x232	; 0x232 <LCD_DisplayString>
			if (plant1.dayTimeWaterOK == 1) {
    1420:	80 91 b9 03 	lds	r24, 0x03B9	; 0x8003b9 <plant1>
    1424:	81 30       	cpi	r24, 0x01	; 1
				LCD_DisplayString(17, "Yes");
    1426:	41 f4       	brne	.+16     	; 0x1438 <ss+0xaf6>
    1428:	6f e2       	ldi	r22, 0x2F	; 47
    142a:	72 e0       	ldi	r23, 0x02	; 2
    142c:	81 e1       	ldi	r24, 0x11	; 17
    142e:	0e 94 19 01 	call	0x232	; 0x232 <LCD_DisplayString>
    1432:	c9 e1       	ldi	r28, 0x19	; 25
    1434:	d0 e0       	ldi	r29, 0x00	; 0
			}
			else if (plant1.dayTimeWaterOK == 0) {
    1436:	31 c2       	rjmp	.+1122   	; 0x189a <ss+0xf58>
    1438:	81 11       	cpse	r24, r1
				LCD_DisplayString(17, "No");
    143a:	93 c1       	rjmp	.+806    	; 0x1762 <ss+0xe20>
    143c:	63 e3       	ldi	r22, 0x33	; 51
    143e:	72 e0       	ldi	r23, 0x02	; 2
    1440:	81 e1       	ldi	r24, 0x11	; 17
    1442:	0e 94 19 01 	call	0x232	; 0x232 <LCD_DisplayString>
    1446:	c9 e1       	ldi	r28, 0x19	; 25
    1448:	d0 e0       	ldi	r29, 0x00	; 0
			}
			break;
			
		case SETTING2:
			LCD_DisplayString(1, "Water every");
    144a:	27 c2       	rjmp	.+1102   	; 0x189a <ss+0xf58>
    144c:	62 ed       	ldi	r22, 0xD2	; 210
    144e:	72 e0       	ldi	r23, 0x02	; 2
    1450:	81 e0       	ldi	r24, 0x01	; 1
    1452:	0e 94 19 01 	call	0x232	; 0x232 <LCD_DisplayString>
			LCD_Cursor(13);
    1456:	8d e0       	ldi	r24, 0x0D	; 13
    1458:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCD_Cursor>
			LCD_WriteData(plant1.waterFrequency + '0');
    145c:	80 91 ba 03 	lds	r24, 0x03BA	; 0x8003ba <plant1+0x1>
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	c0 96       	adiw	r24, 0x30	; 48
    1464:	0e 94 10 01 	call	0x220	; 0x220 <LCD_WriteData>
			LCD_DisplayString(17, "days");
    1468:	6e ed       	ldi	r22, 0xDE	; 222
    146a:	72 e0       	ldi	r23, 0x02	; 2
    146c:	81 e1       	ldi	r24, 0x11	; 17
    146e:	0e 94 19 01 	call	0x232	; 0x232 <LCD_DisplayString>
			break;
    1472:	ca e1       	ldi	r28, 0x1A	; 26
    1474:	d0 e0       	ldi	r29, 0x00	; 0
			
		case SETTING3:
			LCD_DisplayString(1, "MS Threshold");
    1476:	11 c2       	rjmp	.+1058   	; 0x189a <ss+0xf58>
    1478:	63 ee       	ldi	r22, 0xE3	; 227
    147a:	72 e0       	ldi	r23, 0x02	; 2
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	0e 94 19 01 	call	0x232	; 0x232 <LCD_DisplayString>
			convertToDec(17, plant1.moisture);
    1482:	60 91 bb 03 	lds	r22, 0x03BB	; 0x8003bb <plant1+0x2>
    1486:	70 91 bc 03 	lds	r23, 0x03BC	; 0x8003bc <plant1+0x3>
    148a:	81 e1       	ldi	r24, 0x11	; 17
    148c:	d5 d9       	rcall	.-3158   	; 0x838 <convertToDec>
			break;
    148e:	cb e1       	ldi	r28, 0x1B	; 27
    1490:	d0 e0       	ldi	r29, 0x00	; 0
    1492:	03 c2       	rjmp	.+1030   	; 0x189a <ss+0xf58>
			
		case SETTING4:
			LCD_DisplayString(1, "Sun Threshold");
    1494:	60 ef       	ldi	r22, 0xF0	; 240
    1496:	72 e0       	ldi	r23, 0x02	; 2
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	0e 94 19 01 	call	0x232	; 0x232 <LCD_DisplayString>
			convertToDec(17, plant1.sunLevel);
    149e:	60 91 bd 03 	lds	r22, 0x03BD	; 0x8003bd <plant1+0x4>
    14a2:	70 91 be 03 	lds	r23, 0x03BE	; 0x8003be <plant1+0x5>
    14a6:	81 e1       	ldi	r24, 0x11	; 17
    14a8:	c7 d9       	rcall	.-3186   	; 0x838 <convertToDec>
    14aa:	cc e1       	ldi	r28, 0x1C	; 28
			break;
    14ac:	d0 e0       	ldi	r29, 0x00	; 0
    14ae:	f5 c1       	rjmp	.+1002   	; 0x189a <ss+0xf58>
    14b0:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <profileQs>
			
		case Q1:
			LCD_DisplayString(1, profileQs[0]);
    14b4:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <profileQs+0x1>
    14b8:	81 e0       	ldi	r24, 0x01	; 1
    14ba:	0e 94 19 01 	call	0x232	; 0x232 <LCD_DisplayString>
    14be:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
			LCD_DisplayString(22, answer);
    14c2:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
    14c6:	86 e1       	ldi	r24, 0x16	; 22
    14c8:	0e 94 19 01 	call	0x232	; 0x232 <LCD_DisplayString>
    14cc:	0e 94 00 02 	call	0x400	; 0x400 <GetKeypadKey>
			if (GetKeypadKey() == 'A') {
    14d0:	81 34       	cpi	r24, 0x41	; 65
    14d2:	71 f4       	brne	.+28     	; 0x14f0 <ss+0xbae>
    14d4:	8f e2       	ldi	r24, 0x2F	; 47
				answer = "Yes";
    14d6:	92 e0       	ldi	r25, 0x02	; 2
    14d8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    14dc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    14e0:	81 e0       	ldi	r24, 0x01	; 1
				plant1.dayTimeWaterOK = 1;
    14e2:	80 93 b9 03 	sts	0x03B9, r24	; 0x8003b9 <plant1>
    14e6:	80 93 c0 03 	sts	0x03C0, r24	; 0x8003c0 <gotit>
				gotit = 1;
    14ea:	cd e0       	ldi	r28, 0x0D	; 13
    14ec:	d0 e0       	ldi	r29, 0x00	; 0
    14ee:	d5 c1       	rjmp	.+938    	; 0x189a <ss+0xf58>
    14f0:	0e 94 00 02 	call	0x400	; 0x400 <GetKeypadKey>
			}
			else if (GetKeypadKey() == 'B') {
    14f4:	82 34       	cpi	r24, 0x42	; 66
    14f6:	71 f4       	brne	.+28     	; 0x1514 <ss+0xbd2>
    14f8:	8e ef       	ldi	r24, 0xFE	; 254
				answer = "No ";
    14fa:	92 e0       	ldi	r25, 0x02	; 2
    14fc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    1500:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    1504:	10 92 b9 03 	sts	0x03B9, r1	; 0x8003b9 <plant1>
				plant1.dayTimeWaterOK = 0;
    1508:	81 e0       	ldi	r24, 0x01	; 1
				gotit = 1;
    150a:	80 93 c0 03 	sts	0x03C0, r24	; 0x8003c0 <gotit>
    150e:	cd e0       	ldi	r28, 0x0D	; 13
    1510:	d0 e0       	ldi	r29, 0x00	; 0
    1512:	c3 c1       	rjmp	.+902    	; 0x189a <ss+0xf58>
    1514:	0e 94 00 02 	call	0x400	; 0x400 <GetKeypadKey>
			}
			else if (GetKeypadKey() == '*') {
    1518:	8a 32       	cpi	r24, 0x2A	; 42
    151a:	09 f0       	breq	.+2      	; 0x151e <ss+0xbdc>
    151c:	25 c1       	rjmp	.+586    	; 0x1768 <ss+0xe26>
    151e:	8b e1       	ldi	r24, 0x1B	; 27
				answer = " ";
    1520:	91 e0       	ldi	r25, 0x01	; 1
    1522:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    1526:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    152a:	cd e0       	ldi	r28, 0x0D	; 13
    152c:	d0 e0       	ldi	r29, 0x00	; 0
    152e:	b5 c1       	rjmp	.+874    	; 0x189a <ss+0xf58>
			}
			break;
			
		case Q2:
			LCD_DisplayString(1, profileQs[1]);
    1530:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <profileQs+0x2>
    1534:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <profileQs+0x3>
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	0e 94 19 01 	call	0x232	; 0x232 <LCD_DisplayString>
			if (VALID) {
    153e:	0e 94 00 02 	call	0x400	; 0x400 <GetKeypadKey>
    1542:	81 34       	cpi	r24, 0x41	; 65
    1544:	09 f4       	brne	.+2      	; 0x1548 <ss+0xc06>
    1546:	13 c1       	rjmp	.+550    	; 0x176e <ss+0xe2c>
    1548:	0e 94 00 02 	call	0x400	; 0x400 <GetKeypadKey>
    154c:	82 34       	cpi	r24, 0x42	; 66
    154e:	09 f4       	brne	.+2      	; 0x1552 <ss+0xc10>
    1550:	11 c1       	rjmp	.+546    	; 0x1774 <ss+0xe32>
    1552:	0e 94 00 02 	call	0x400	; 0x400 <GetKeypadKey>
    1556:	83 34       	cpi	r24, 0x43	; 67
    1558:	09 f4       	brne	.+2      	; 0x155c <ss+0xc1a>
    155a:	0f c1       	rjmp	.+542    	; 0x177a <ss+0xe38>
    155c:	0e 94 00 02 	call	0x400	; 0x400 <GetKeypadKey>
    1560:	84 34       	cpi	r24, 0x44	; 68
    1562:	09 f4       	brne	.+2      	; 0x1566 <ss+0xc24>
    1564:	0d c1       	rjmp	.+538    	; 0x1780 <ss+0xe3e>
    1566:	0e 94 00 02 	call	0x400	; 0x400 <GetKeypadKey>
    156a:	88 23       	and	r24, r24
    156c:	09 f4       	brne	.+2      	; 0x1570 <ss+0xc2e>
				/* for Demo: special key to set frequency to 1 min, can show reseting/watering */
				if (GetKeypadKey() == '*') {
    156e:	0b c1       	rjmp	.+534    	; 0x1786 <ss+0xe44>
    1570:	0e 94 00 02 	call	0x400	; 0x400 <GetKeypadKey>
    1574:	8a 32       	cpi	r24, 0x2A	; 42
					plant1.waterFrequency = 99;
    1576:	81 f4       	brne	.+32     	; 0x1598 <ss+0xc56>
    1578:	83 e6       	ldi	r24, 0x63	; 99
    157a:	80 93 ba 03 	sts	0x03BA, r24	; 0x8003ba <plant1+0x1>
					LCD_Cursor(28);
    157e:	8c e1       	ldi	r24, 0x1C	; 28
    1580:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCD_Cursor>
					LCD_WriteData(9 + '0');
    1584:	89 e3       	ldi	r24, 0x39	; 57
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	0e 94 10 01 	call	0x220	; 0x220 <LCD_WriteData>
					gotit = 1;
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	80 93 c0 03 	sts	0x03C0, r24	; 0x8003c0 <gotit>
    1592:	ce e0       	ldi	r28, 0x0E	; 14
    1594:	d0 e0       	ldi	r29, 0x00	; 0
				}
				else {
					LCD_Cursor(28);
    1596:	81 c1       	rjmp	.+770    	; 0x189a <ss+0xf58>
    1598:	8c e1       	ldi	r24, 0x1C	; 28
    159a:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCD_Cursor>
					LCD_WriteData(GetKeypadKey());
    159e:	0e 94 00 02 	call	0x400	; 0x400 <GetKeypadKey>
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	0e 94 10 01 	call	0x220	; 0x220 <LCD_WriteData>
					plant1.waterFrequency = GetKeypadKey() - '0';
    15a8:	0e 94 00 02 	call	0x400	; 0x400 <GetKeypadKey>
    15ac:	80 53       	subi	r24, 0x30	; 48
    15ae:	80 93 ba 03 	sts	0x03BA, r24	; 0x8003ba <plant1+0x1>
					gotit = 1;
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	80 93 c0 03 	sts	0x03C0, r24	; 0x8003c0 <gotit>
    15b8:	ce e0       	ldi	r28, 0x0E	; 14
    15ba:	d0 e0       	ldi	r29, 0x00	; 0
				}
			}
			break;
			
		case Q3_1:
			LCD_DisplayString(1, "1.Place Moisture  Sensor    -->");
    15bc:	6e c1       	rjmp	.+732    	; 0x189a <ss+0xf58>
    15be:	67 e8       	ldi	r22, 0x87	; 135
    15c0:	72 e0       	ldi	r23, 0x02	; 2
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	0e 94 19 01 	call	0x232	; 0x232 <LCD_DisplayString>
			break;
    15c8:	cf e0       	ldi	r28, 0x0F	; 15
    15ca:	d0 e0       	ldi	r29, 0x00	; 0
		
		case Q3_2:
			LCD_DisplayString(1, "2.Reading: ");
    15cc:	66 c1       	rjmp	.+716    	; 0x189a <ss+0xf58>
    15ce:	62 e7       	ldi	r22, 0x72	; 114
    15d0:	72 e0       	ldi	r23, 0x02	; 2
    15d2:	81 e0       	ldi	r24, 0x01	; 1
    15d4:	0e 94 19 01 	call	0x232	; 0x232 <LCD_DisplayString>
			plant1.moisture = MS_reading;
    15d8:	60 91 c8 03 	lds	r22, 0x03C8	; 0x8003c8 <MS_reading>
    15dc:	70 91 c9 03 	lds	r23, 0x03C9	; 0x8003c9 <MS_reading+0x1>
    15e0:	70 93 bc 03 	sts	0x03BC, r23	; 0x8003bc <plant1+0x3>
    15e4:	60 93 bb 03 	sts	0x03BB, r22	; 0x8003bb <plant1+0x2>
			convertToDec(12, MS_reading);
    15e8:	8c e0       	ldi	r24, 0x0C	; 12
    15ea:	26 d9       	rcall	.-3508   	; 0x838 <convertToDec>
			LCD_DisplayString(25, "SAVE -->");
    15ec:	6e e7       	ldi	r22, 0x7E	; 126
    15ee:	72 e0       	ldi	r23, 0x02	; 2
    15f0:	89 e1       	ldi	r24, 0x19	; 25
    15f2:	0e 94 19 01 	call	0x232	; 0x232 <LCD_DisplayString>
			break;
    15f6:	c0 e1       	ldi	r28, 0x10	; 16
    15f8:	d0 e0       	ldi	r29, 0x00	; 0
			
		case Q4_1:
			LCD_DisplayString(1, "3.Set Photo       Sensor    -->");
    15fa:	4f c1       	rjmp	.+670    	; 0x189a <ss+0xf58>
    15fc:	62 e0       	ldi	r22, 0x02	; 2
    15fe:	73 e0       	ldi	r23, 0x03	; 3
    1600:	81 e0       	ldi	r24, 0x01	; 1
    1602:	0e 94 19 01 	call	0x232	; 0x232 <LCD_DisplayString>
			break;
    1606:	c1 e1       	ldi	r28, 0x11	; 17
    1608:	d0 e0       	ldi	r29, 0x00	; 0
		
		case Q4_2:
			LCD_DisplayString(1, "4.Reading: ");
    160a:	47 c1       	rjmp	.+654    	; 0x189a <ss+0xf58>
    160c:	62 e2       	ldi	r22, 0x22	; 34
    160e:	73 e0       	ldi	r23, 0x03	; 3
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	0e 94 19 01 	call	0x232	; 0x232 <LCD_DisplayString>
			plant1.sunLevel = SUN_reading;
    1616:	60 91 ca 03 	lds	r22, 0x03CA	; 0x8003ca <SUN_reading>
    161a:	70 91 cb 03 	lds	r23, 0x03CB	; 0x8003cb <SUN_reading+0x1>
    161e:	70 93 be 03 	sts	0x03BE, r23	; 0x8003be <plant1+0x5>
    1622:	60 93 bd 03 	sts	0x03BD, r22	; 0x8003bd <plant1+0x4>
			convertToDec(12, SUN_reading);
    1626:	8c e0       	ldi	r24, 0x0C	; 12
    1628:	07 d9       	rcall	.-3570   	; 0x838 <convertToDec>
			LCD_DisplayString(25, "SAVE -->");
    162a:	6e e7       	ldi	r22, 0x7E	; 126
    162c:	72 e0       	ldi	r23, 0x02	; 2
    162e:	89 e1       	ldi	r24, 0x19	; 25
    1630:	0e 94 19 01 	call	0x232	; 0x232 <LCD_DisplayString>
			break;
    1634:	c2 e1       	ldi	r28, 0x12	; 18
    1636:	d0 e0       	ldi	r29, 0x00	; 0
    1638:	30 c1       	rjmp	.+608    	; 0x189a <ss+0xf58>
			
		case CONFIRM:
			LCD_DisplayString(1, "Select Mem Slot 1,2,3,4?:");
    163a:	6e e2       	ldi	r22, 0x2E	; 46
    163c:	73 e0       	ldi	r23, 0x03	; 3
    163e:	81 e0       	ldi	r24, 0x01	; 1
    1640:	0e 94 19 01 	call	0x232	; 0x232 <LCD_DisplayString>
			if (input1234) {
    1644:	0e 94 00 02 	call	0x400	; 0x400 <GetKeypadKey>
    1648:	81 33       	cpi	r24, 0x31	; 49
    164a:	69 f0       	breq	.+26     	; 0x1666 <ss+0xd24>
    164c:	0e 94 00 02 	call	0x400	; 0x400 <GetKeypadKey>
    1650:	82 33       	cpi	r24, 0x32	; 50
    1652:	49 f0       	breq	.+18     	; 0x1666 <ss+0xd24>
    1654:	0e 94 00 02 	call	0x400	; 0x400 <GetKeypadKey>
    1658:	83 33       	cpi	r24, 0x33	; 51
    165a:	29 f0       	breq	.+10     	; 0x1666 <ss+0xd24>
    165c:	0e 94 00 02 	call	0x400	; 0x400 <GetKeypadKey>
    1660:	84 33       	cpi	r24, 0x34	; 52
    1662:	09 f0       	breq	.+2      	; 0x1666 <ss+0xd24>
    1664:	93 c0       	rjmp	.+294    	; 0x178c <ss+0xe4a>
				LCD_Cursor(27);
    1666:	8b e1       	ldi	r24, 0x1B	; 27
    1668:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCD_Cursor>
				memSlot = GetKeypadKey() - '0';
    166c:	0e 94 00 02 	call	0x400	; 0x400 <GetKeypadKey>
    1670:	80 53       	subi	r24, 0x30	; 48
    1672:	80 93 b8 03 	sts	0x03B8, r24	; 0x8003b8 <memSlot>
				LCD_WriteData(memSlot + '0');
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	c0 96       	adiw	r24, 0x30	; 48
    167a:	0e 94 10 01 	call	0x220	; 0x220 <LCD_WriteData>
    167e:	c3 e1       	ldi	r28, 0x13	; 19
    1680:	d0 e0       	ldi	r29, 0x00	; 0
    1682:	0b c1       	rjmp	.+534    	; 0x189a <ss+0xf58>
			}
			break;
		
		case WRITE:
			for (signed char i = 0; i < 50; ++i) {
				LCD_DisplayString(1, "Saving Profile..");
    1684:	68 e4       	ldi	r22, 0x48	; 72
    1686:	73 e0       	ldi	r23, 0x03	; 3
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	0e 94 19 01 	call	0x232	; 0x232 <LCD_DisplayString>
    168e:	c1 50       	subi	r28, 0x01	; 1
				LCD_WriteData(memSlot + '0');
			}
			break;
		
		case WRITE:
			for (signed char i = 0; i < 50; ++i) {
    1690:	c9 f7       	brne	.-14     	; 0x1684 <ss+0xd42>
				LCD_DisplayString(1, "Saving Profile..");
			}
			savePlantProfile(plant1, memSlot);
    1692:	20 91 b8 03 	lds	r18, 0x03B8	; 0x8003b8 <memSlot>
    1696:	40 91 b9 03 	lds	r20, 0x03B9	; 0x8003b9 <plant1>
    169a:	50 91 ba 03 	lds	r21, 0x03BA	; 0x8003ba <plant1+0x1>
    169e:	60 91 bb 03 	lds	r22, 0x03BB	; 0x8003bb <plant1+0x2>
    16a2:	70 91 bc 03 	lds	r23, 0x03BC	; 0x8003bc <plant1+0x3>
    16a6:	80 91 bd 03 	lds	r24, 0x03BD	; 0x8003bd <plant1+0x4>
    16aa:	90 91 be 03 	lds	r25, 0x03BE	; 0x8003be <plant1+0x5>
    16ae:	33 d8       	rcall	.-3994   	; 0x716 <savePlantProfile>
    16b0:	80 91 b8 03 	lds	r24, 0x03B8	; 0x8003b8 <memSlot>
			if (memSlot == 1) {
    16b4:	81 30       	cpi	r24, 0x01	; 1
    16b6:	21 f4       	brne	.+8      	; 0x16c0 <ss+0xd7e>
    16b8:	84 e1       	ldi	r24, 0x14	; 20
				num = ONE;
    16ba:	80 93 c1 03 	sts	0x03C1, r24	; 0x8003c1 <num>
    16be:	11 c0       	rjmp	.+34     	; 0x16e2 <ss+0xda0>
    16c0:	82 30       	cpi	r24, 0x02	; 2
			}
			else if (memSlot == 2) {
    16c2:	21 f4       	brne	.+8      	; 0x16cc <ss+0xd8a>
    16c4:	83 eb       	ldi	r24, 0xB3	; 179
				num = TWO;
    16c6:	80 93 c1 03 	sts	0x03C1, r24	; 0x8003c1 <num>
    16ca:	0b c0       	rjmp	.+22     	; 0x16e2 <ss+0xda0>
    16cc:	83 30       	cpi	r24, 0x03	; 3
			}
			else if (memSlot == 3) {
    16ce:	21 f4       	brne	.+8      	; 0x16d8 <ss+0xd96>
    16d0:	86 eb       	ldi	r24, 0xB6	; 182
				num = THREE;
    16d2:	80 93 c1 03 	sts	0x03C1, r24	; 0x8003c1 <num>
    16d6:	05 c0       	rjmp	.+10     	; 0x16e2 <ss+0xda0>
    16d8:	84 30       	cpi	r24, 0x04	; 4
			}
			else if (memSlot == 4) {
    16da:	19 f4       	brne	.+6      	; 0x16e2 <ss+0xda0>
    16dc:	84 ed       	ldi	r24, 0xD4	; 212
				num = FOUR;
    16de:	80 93 c1 03 	sts	0x03C1, r24	; 0x8003c1 <num>
    16e2:	80 91 c1 03 	lds	r24, 0x03C1	; 0x8003c1 <num>
			}
			transmit_data(num);
    16e6:	0e 94 68 03 	call	0x6d0	; 0x6d0 <transmit_data>
    16ea:	0e 94 f6 00 	call	0x1ec	; 0x1ec <LCD_ClearScreen>
			LCD_ClearScreen();
    16ee:	c4 e1       	ldi	r28, 0x14	; 20
			break;
    16f0:	d0 e0       	ldi	r29, 0x00	; 0
    16f2:	d3 c0       	rjmp	.+422    	; 0x189a <ss+0xf58>
    16f4:	68 e4       	ldi	r22, 0x48	; 72
			
		case WRITE_MS:
			for (signed char i = 0; i < 50; ++i) {
				LCD_DisplayString(1, "Saving Profile..");
    16f6:	73 e0       	ldi	r23, 0x03	; 3
    16f8:	81 e0       	ldi	r24, 0x01	; 1
    16fa:	0e 94 19 01 	call	0x232	; 0x232 <LCD_DisplayString>
    16fe:	c1 50       	subi	r28, 0x01	; 1
    1700:	c9 f7       	brne	.-14     	; 0x16f4 <ss+0xdb2>
			transmit_data(num);
			LCD_ClearScreen();
			break;
			
		case WRITE_MS:
			for (signed char i = 0; i < 50; ++i) {
    1702:	60 91 b8 03 	lds	r22, 0x03B8	; 0x8003b8 <memSlot>
				LCD_DisplayString(1, "Saving Profile..");
			}
			saveMS(plant1.moisture, memSlot);
    1706:	80 91 bb 03 	lds	r24, 0x03BB	; 0x8003bb <plant1+0x2>
    170a:	90 91 bc 03 	lds	r25, 0x03BC	; 0x8003bc <plant1+0x3>
    170e:	0e 94 83 03 	call	0x706	; 0x706 <saveMS>
    1712:	0e 94 f6 00 	call	0x1ec	; 0x1ec <LCD_ClearScreen>
			LCD_ClearScreen();
    1716:	c5 e1       	ldi	r28, 0x15	; 21
			break;
    1718:	d0 e0       	ldi	r29, 0x00	; 0
    171a:	bf c0       	rjmp	.+382    	; 0x189a <ss+0xf58>
    171c:	68 e4       	ldi	r22, 0x48	; 72
			
		case WRITE_SUN:
			for (signed char i = 0; i < 50; ++i) {
				LCD_DisplayString(1, "Saving Profile..");
    171e:	73 e0       	ldi	r23, 0x03	; 3
    1720:	81 e0       	ldi	r24, 0x01	; 1
    1722:	0e 94 19 01 	call	0x232	; 0x232 <LCD_DisplayString>
    1726:	c1 50       	subi	r28, 0x01	; 1
    1728:	c9 f7       	brne	.-14     	; 0x171c <ss+0xdda>
			}
			saveMS(plant1.sunLevel, memSlot);
    172a:	60 91 b8 03 	lds	r22, 0x03B8	; 0x8003b8 <memSlot>
    172e:	80 91 bd 03 	lds	r24, 0x03BD	; 0x8003bd <plant1+0x4>
    1732:	90 91 be 03 	lds	r25, 0x03BE	; 0x8003be <plant1+0x5>
    1736:	0e 94 83 03 	call	0x706	; 0x706 <saveMS>
			LCD_ClearScreen();
    173a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <LCD_ClearScreen>
			break;
    173e:	c6 e1       	ldi	r28, 0x16	; 22
    1740:	d0 e0       	ldi	r29, 0x00	; 0
    1742:	ab c0       	rjmp	.+342    	; 0x189a <ss+0xf58>
    1744:	c2 e0       	ldi	r28, 0x02	; 2
    1746:	d0 e0       	ldi	r29, 0x00	; 0
    1748:	a8 c0       	rjmp	.+336    	; 0x189a <ss+0xf58>
    174a:	c1 e0       	ldi	r28, 0x01	; 1
    174c:	d0 e0       	ldi	r29, 0x00	; 0
    174e:	a5 c0       	rjmp	.+330    	; 0x189a <ss+0xf58>
    1750:	c3 e0       	ldi	r28, 0x03	; 3
    1752:	d0 e0       	ldi	r29, 0x00	; 0
    1754:	a2 c0       	rjmp	.+324    	; 0x189a <ss+0xf58>
    1756:	c4 e0       	ldi	r28, 0x04	; 4
    1758:	d0 e0       	ldi	r29, 0x00	; 0
    175a:	9f c0       	rjmp	.+318    	; 0x189a <ss+0xf58>
    175c:	c7 e1       	ldi	r28, 0x17	; 23
    175e:	d0 e0       	ldi	r29, 0x00	; 0
    1760:	9c c0       	rjmp	.+312    	; 0x189a <ss+0xf58>
    1762:	c9 e1       	ldi	r28, 0x19	; 25
    1764:	d0 e0       	ldi	r29, 0x00	; 0
    1766:	99 c0       	rjmp	.+306    	; 0x189a <ss+0xf58>
    1768:	cd e0       	ldi	r28, 0x0D	; 13
    176a:	d0 e0       	ldi	r29, 0x00	; 0
    176c:	96 c0       	rjmp	.+300    	; 0x189a <ss+0xf58>
    176e:	ce e0       	ldi	r28, 0x0E	; 14
    1770:	d0 e0       	ldi	r29, 0x00	; 0
    1772:	93 c0       	rjmp	.+294    	; 0x189a <ss+0xf58>
    1774:	ce e0       	ldi	r28, 0x0E	; 14
    1776:	d0 e0       	ldi	r29, 0x00	; 0
    1778:	90 c0       	rjmp	.+288    	; 0x189a <ss+0xf58>
    177a:	ce e0       	ldi	r28, 0x0E	; 14
    177c:	d0 e0       	ldi	r29, 0x00	; 0
    177e:	8d c0       	rjmp	.+282    	; 0x189a <ss+0xf58>
    1780:	ce e0       	ldi	r28, 0x0E	; 14
    1782:	d0 e0       	ldi	r29, 0x00	; 0
    1784:	8a c0       	rjmp	.+276    	; 0x189a <ss+0xf58>
    1786:	ce e0       	ldi	r28, 0x0E	; 14
    1788:	d0 e0       	ldi	r29, 0x00	; 0
    178a:	87 c0       	rjmp	.+270    	; 0x189a <ss+0xf58>
    178c:	c3 e1       	ldi	r28, 0x13	; 19
    178e:	d0 e0       	ldi	r29, 0x00	; 0
		case MAIN1:
			if (DOWN && control == 0) {
				LCD_ClearScreen();
				control = 1;
			}
			else if (UP && control == 1) {
    1790:	84 c0       	rjmp	.+264    	; 0x189a <ss+0xf58>
    1792:	86 39       	cpi	r24, 0x96	; 150
    1794:	91 05       	cpc	r25, r1
    1796:	08 f4       	brcc	.+2      	; 0x179a <ss+0xe58>
    1798:	fe c8       	rjmp	.-3588   	; 0x996 <ss+0x54>
    179a:	16 c9       	rjmp	.-3540   	; 0x9c8 <ss+0x86>
    179c:	86 39       	cpi	r24, 0x96	; 150
    179e:	91 05       	cpc	r25, r1
    17a0:	08 f0       	brcs	.+2      	; 0x17a4 <ss+0xe62>
    17a2:	06 c9       	rjmp	.-3572   	; 0x9b0 <ss+0x6e>
			else if (DOWN && control == 1) {
				LCD_ClearScreen();
				control = 2;
				stater = MAIN2;
			}
			if (control == 0 && RIGHT) {
    17a4:	f8 c8       	rjmp	.-3600   	; 0x996 <ss+0x54>
    17a6:	88 23       	and	r24, r24
    17a8:	09 f4       	brne	.+2      	; 0x17ac <ss+0xe6a>
    17aa:	12 c9       	rjmp	.-3548   	; 0x9d0 <ss+0x8e>
			
		case MAIN2:
			if (UP && control == 2) {
				LCD_ClearScreen();
				control = 1;
				stater = MAIN1;
    17ac:	32 c0       	rjmp	.+100    	; 0x1812 <ss+0xed0>
    17ae:	c2 e0       	ldi	r28, 0x02	; 2
			}
			if (DOWN && control == 2) {
				LCD_ClearScreen();
				control = 3;
			}
			else if (UP && control == 3) {
    17b0:	d0 e0       	ldi	r29, 0x00	; 0
    17b2:	86 39       	cpi	r24, 0x96	; 150
    17b4:	91 05       	cpc	r25, r1
    17b6:	08 f4       	brcc	.+2      	; 0x17ba <ss+0xe78>
    17b8:	81 c9       	rjmp	.-3326   	; 0xabc <ss+0x17a>
    17ba:	44 c0       	rjmp	.+136    	; 0x1844 <ss+0xf02>
    17bc:	86 39       	cpi	r24, 0x96	; 150
    17be:	91 05       	cpc	r25, r1
    17c0:	08 f0       	brcs	.+2      	; 0x17c4 <ss+0xe82>
    17c2:	91 c9       	rjmp	.-3294   	; 0xae6 <ss+0x1a4>
			}
			if (UP && control == 5) {
				LCD_ClearScreen();
				control = 4;
			}
			if (control == 4 && RIGHT) {
    17c4:	7b c9       	rjmp	.-3338   	; 0xabc <ss+0x17a>
    17c6:	84 30       	cpi	r24, 0x04	; 4
    17c8:	09 f0       	breq	.+2      	; 0x17cc <ss+0xe8a>
    17ca:	59 c0       	rjmp	.+178    	; 0x187e <ss+0xf3c>
			if (UP) {
				LCD_ClearScreen();
				control = 0;
				stater = MAIN1;
			}
			if (LEFT) {
    17cc:	d6 c9       	rjmp	.-3156   	; 0xb7a <ss+0x238>
    17ce:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <UD>
    17d2:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <UD+0x1>
    17d6:	86 39       	cpi	r24, 0x96	; 150
    17d8:	91 05       	cpc	r25, r1
    17da:	08 f4       	brcc	.+2      	; 0x17de <ss+0xe9c>
    17dc:	40 ca       	rjmp	.-2944   	; 0xc5e <ss+0x31c>
			control = 0;
			stater = WELCOME;
			break;
	}
	
	switch(stater) {
    17de:	7f cd       	rjmp	.-1282   	; 0x12de <ss+0x99c>
    17e0:	cd 31       	cpi	r28, 0x1D	; 29
    17e2:	d1 05       	cpc	r29, r1
    17e4:	08 f0       	brcs	.+2      	; 0x17e8 <ss+0xea6>
    17e6:	59 c0       	rjmp	.+178    	; 0x189a <ss+0xf58>
    17e8:	fe 01       	movw	r30, r28
    17ea:	e0 58       	subi	r30, 0x80	; 128
    17ec:	ff 4f       	sbci	r31, 0xFF	; 255
    17ee:	88 c2       	rjmp	.+1296   	; 0x1d00 <__tablejump2__>
    17f0:	cd 31       	cpi	r28, 0x1D	; 29
    17f2:	d1 05       	cpc	r29, r1
    17f4:	08 f0       	brcs	.+2      	; 0x17f8 <ss+0xeb6>
    17f6:	51 c0       	rjmp	.+162    	; 0x189a <ss+0xf58>
    17f8:	fe 01       	movw	r30, r28
    17fa:	e3 56       	subi	r30, 0x63	; 99
    17fc:	ff 4f       	sbci	r31, 0xFF	; 255
    17fe:	80 c2       	rjmp	.+1280   	; 0x1d00 <__tablejump2__>
    1800:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <control>
			}
			else if (UP && control == 1) {
				LCD_ClearScreen();
				control = 0;
			}
			else if (DOWN && control == 1) {
    1804:	d0 cf       	rjmp	.-96     	; 0x17a6 <ss+0xe64>
    1806:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <control>
				LCD_ClearScreen();
				control = 2;
				stater = MAIN2;
			}
			if (control == 0 && RIGHT) {
    180a:	88 23       	and	r24, r24
    180c:	09 f4       	brne	.+2      	; 0x1810 <ss+0xece>
    180e:	e0 c8       	rjmp	.-3648   	; 0x9d0 <ss+0x8e>
    1810:	ff c8       	rjmp	.-3586   	; 0xa10 <ss+0xce>
    1812:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <UD>
			}
			if (control == 1 && RIGHT) {
				LCD_ClearScreen();
				stater = READFROM;
			}
			if (LEFT) {
    1816:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <UD+0x1>
    181a:	86 39       	cpi	r24, 0x96	; 150
    181c:	91 05       	cpc	r25, r1
    181e:	08 f4       	brcc	.+2      	; 0x1822 <ss+0xee0>
    1820:	ff c8       	rjmp	.-3586   	; 0xa20 <ss+0xde>
    1822:	cb cc       	rjmp	.-1642   	; 0x11ba <ss+0x878>
    1824:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <LR>
			if (UP && control == 2) {
				LCD_ClearScreen();
				control = 1;
				stater = MAIN1;
			}
			if (DOWN && control == 2) {
    1828:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <LR+0x1>
    182c:	83 35       	cpi	r24, 0x53	; 83
    182e:	23 e0       	ldi	r18, 0x03	; 3
    1830:	92 07       	cpc	r25, r18
    1832:	08 f0       	brcs	.+2      	; 0x1836 <ss+0xef4>
    1834:	39 c9       	rjmp	.-3470   	; 0xaa8 <ss+0x166>
    1836:	57 c9       	rjmp	.-3410   	; 0xae6 <ss+0x1a4>
    1838:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <control>
			else if (DOWN && control == 3) {
				LCD_ClearScreen();
				control = 4;
				stater = MAIN3;
			}
			if (control == 2 && RIGHT) {
    183c:	82 30       	cpi	r24, 0x02	; 2
    183e:	09 f0       	breq	.+2      	; 0x1842 <ss+0xf00>
    1840:	a7 cc       	rjmp	.-1714   	; 0x1190 <ss+0x84e>
    1842:	55 c9       	rjmp	.-3414   	; 0xaee <ss+0x1ac>
    1844:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <control>
			}
			else if (UP && control == 3) {
				LCD_ClearScreen();
				control = 2;
			}
			else if (DOWN && control == 3) {
    1848:	83 30       	cpi	r24, 0x03	; 3
    184a:	09 f4       	brne	.+2      	; 0x184e <ss+0xf0c>
    184c:	45 c9       	rjmp	.-3446   	; 0xad8 <ss+0x196>
    184e:	a0 cc       	rjmp	.-1728   	; 0x1190 <ss+0x84e>
    1850:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <control>
				LCD_ClearScreen();
				control = 4;
				stater = MAIN3;
			}
			if (control == 2 && RIGHT) {
    1854:	82 30       	cpi	r24, 0x02	; 2
    1856:	09 f0       	breq	.+2      	; 0x185a <ss+0xf18>
    1858:	9b cc       	rjmp	.-1738   	; 0x1190 <ss+0x84e>
    185a:	49 c9       	rjmp	.-3438   	; 0xaee <ss+0x1ac>
    185c:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <UD>
				LCD_ClearScreen();
				stater = TAKE_READING;
			}
			if (control == 3 && RIGHT) {
    1860:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <UD+0x1>
    1864:	81 32       	cpi	r24, 0x21	; 33
    1866:	93 40       	sbci	r25, 0x03	; 3
    1868:	08 f0       	brcs	.+2      	; 0x186c <ss+0xf2a>
    186a:	5d c9       	rjmp	.-3398   	; 0xb26 <ss+0x1e4>
    186c:	38 cd       	rjmp	.-1424   	; 0x12de <ss+0x99c>
    186e:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <control>
			if (UP && control == 4) {
				LCD_ClearScreen();
				control = 3;
				stater = MAIN2;
			}
			if (UP && control == 5) {
    1872:	c3 e0       	ldi	r28, 0x03	; 3
			
		case MAIN3:
			if (UP && control == 4) {
				LCD_ClearScreen();
				control = 3;
				stater = MAIN2;
    1874:	d0 e0       	ldi	r29, 0x00	; 0
    1876:	a7 cf       	rjmp	.-178    	; 0x17c6 <ss+0xe84>
    1878:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <control>
			}
			if (control == 5 && RIGHT) {
				LCD_ClearScreen();
				stater = CALIB_SUN;
			}
			if (DOWN && control == 4) {
    187c:	b1 cf       	rjmp	.-158    	; 0x17e0 <ss+0xe9e>
    187e:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <LR>
    1882:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <LR+0x1>
    1886:	83 35       	cpi	r24, 0x53	; 83
    1888:	93 40       	sbci	r25, 0x03	; 3
    188a:	b0 f7       	brcc	.-20     	; 0x1878 <ss+0xf36>
    188c:	81 cc       	rjmp	.-1790   	; 0x1190 <ss+0x84e>
    188e:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <control>
    1892:	84 30       	cpi	r24, 0x04	; 4
    1894:	09 f4       	brne	.+2      	; 0x1898 <ss+0xf56>
    1896:	9f c9       	rjmp	.-3266   	; 0xbd6 <ss+0x294>
    1898:	3b cd       	rjmp	.-1418   	; 0x1310 <ss+0x9ce>
    189a:	ce 01       	movw	r24, r28
			LCD_ClearScreen();
			break;
			
	}
	return stater;
}
    189c:	df 91       	pop	r29
    189e:	cf 91       	pop	r28
    18a0:	08 95       	ret

000018a2 <main>:
    18a2:	cf 93       	push	r28

}


int main(void)
{
    18a4:	df 93       	push	r29
    18a6:	cd b7       	in	r28, 0x3d	; 61
    18a8:	de b7       	in	r29, 0x3e	; 62
    18aa:	a1 97       	sbiw	r28, 0x21	; 33
    18ac:	0f b6       	in	r0, 0x3f	; 63
    18ae:	f8 94       	cli
    18b0:	de bf       	out	0x3e, r29	; 62
    18b2:	0f be       	out	0x3f, r0	; 63
    18b4:	cd bf       	out	0x3d, r28	; 61
	DDRA = 0x0F; PORTA = 0xFF;
    18b6:	8f e0       	ldi	r24, 0x0F	; 15
    18b8:	81 b9       	out	0x01, r24	; 1
    18ba:	1f ef       	ldi	r17, 0xFF	; 255
    18bc:	12 b9       	out	0x02, r17	; 2
	DDRB = 0xF0; PORTB = 0xFF; 	// keypad input
    18be:	80 ef       	ldi	r24, 0xF0	; 240
    18c0:	84 b9       	out	0x04, r24	; 4
    18c2:	15 b9       	out	0x05, r17	; 5
	DDRC = 0xFF; PORTC = 0x00;
    18c4:	17 b9       	out	0x07, r17	; 7
    18c6:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF; PORTD = 0x00;
    18c8:	1a b9       	out	0x0a, r17	; 10
    18ca:	1b b8       	out	0x0b, r1	; 11
	
	ADC_init();
    18cc:	0e 94 3a 03 	call	0x674	; 0x674 <ADC_init>
	LCD_init();
    18d0:	0e 94 01 01 	call	0x202	; 0x202 <LCD_init>
	
	tasksNum = 3;
    18d4:	83 e0       	ldi	r24, 0x03	; 3
    18d6:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <tasksNum>
	task tsks[tasksNum];
	tasks = tsks;
    18da:	ce 01       	movw	r24, r28
    18dc:	01 96       	adiw	r24, 0x01	; 1
    18de:	90 93 b6 03 	sts	0x03B6, r25	; 0x8003b6 <tasks+0x1>
    18e2:	80 93 b5 03 	sts	0x03B5, r24	; 0x8003b5 <tasks>
	
	uchar i = 0;

	tasks[i].state = -1;
    18e6:	19 83       	std	Y+1, r17	; 0x01
	tasks[i].period = 100;
    18e8:	84 e6       	ldi	r24, 0x64	; 100
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	a0 e0       	ldi	r26, 0x00	; 0
    18ee:	b0 e0       	ldi	r27, 0x00	; 0
    18f0:	8a 83       	std	Y+2, r24	; 0x02
    18f2:	9b 83       	std	Y+3, r25	; 0x03
    18f4:	ac 83       	std	Y+4, r26	; 0x04
    18f6:	bd 83       	std	Y+5, r27	; 0x05
	tasks[i].elapsedTime = tasks[i].period;
    18f8:	8e 83       	std	Y+6, r24	; 0x06
    18fa:	9f 83       	std	Y+7, r25	; 0x07
    18fc:	a8 87       	std	Y+8, r26	; 0x08
    18fe:	b9 87       	std	Y+9, r27	; 0x09
	tasks[i].TickFct = &hourGlass;
    1900:	2e e2       	ldi	r18, 0x2E	; 46
    1902:	31 e0       	ldi	r19, 0x01	; 1
    1904:	3b 87       	std	Y+11, r19	; 0x0b
    1906:	2a 87       	std	Y+10, r18	; 0x0a

	++i;

	tasks[i].state = -1;
    1908:	1c 87       	std	Y+12, r17	; 0x0c
	tasks[i].period = 100;
    190a:	8d 87       	std	Y+13, r24	; 0x0d
    190c:	9e 87       	std	Y+14, r25	; 0x0e
    190e:	af 87       	std	Y+15, r26	; 0x0f
    1910:	b8 8b       	std	Y+16, r27	; 0x10
	tasks[i].elapsedTime = tasks[i].period;
    1912:	89 8b       	std	Y+17, r24	; 0x11
    1914:	9a 8b       	std	Y+18, r25	; 0x12
    1916:	ab 8b       	std	Y+19, r26	; 0x13
    1918:	bc 8b       	std	Y+20, r27	; 0x14
	tasks[i].TickFct = &reader;
    191a:	87 e0       	ldi	r24, 0x07	; 7
    191c:	94 e0       	ldi	r25, 0x04	; 4
    191e:	9e 8b       	std	Y+22, r25	; 0x16
    1920:	8d 8b       	std	Y+21, r24	; 0x15
	
	++i;

	tasks[i].state = -1;
    1922:	1f 8b       	std	Y+23, r17	; 0x17
	tasks[i].period = 300;
    1924:	8c e2       	ldi	r24, 0x2C	; 44
    1926:	91 e0       	ldi	r25, 0x01	; 1
    1928:	a0 e0       	ldi	r26, 0x00	; 0
    192a:	b0 e0       	ldi	r27, 0x00	; 0
    192c:	88 8f       	std	Y+24, r24	; 0x18
    192e:	99 8f       	std	Y+25, r25	; 0x19
    1930:	aa 8f       	std	Y+26, r26	; 0x1a
    1932:	bb 8f       	std	Y+27, r27	; 0x1b
	tasks[i].elapsedTime = tasks[i].period;
    1934:	8c 8f       	std	Y+28, r24	; 0x1c
    1936:	9d 8f       	std	Y+29, r25	; 0x1d
    1938:	ae 8f       	std	Y+30, r26	; 0x1e
    193a:	bf 8f       	std	Y+31, r27	; 0x1f
	tasks[i].TickFct = &ss;
    193c:	81 ea       	ldi	r24, 0xA1	; 161
    193e:	94 e0       	ldi	r25, 0x04	; 4
    1940:	99 a3       	std	Y+33, r25	; 0x21
    1942:	88 a3       	std	Y+32, r24	; 0x20
	
	TimerSet(100); // value set should be GCD of all tasks
    1944:	64 e6       	ldi	r22, 0x64	; 100
    1946:	70 e0       	ldi	r23, 0x00	; 0
    1948:	80 e0       	ldi	r24, 0x00	; 0
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	0e 94 05 03 	call	0x60a	; 0x60a <TimerSet>
	TimerOn();
    1950:	0e 94 16 03 	call	0x62c	; 0x62c <TimerOn>
    1954:	ff cf       	rjmp	.-2      	; 0x1954 <main+0xb2>

00001956 <__subsf3>:
    1956:	50 58       	subi	r21, 0x80	; 128

00001958 <__addsf3>:
    1958:	bb 27       	eor	r27, r27
    195a:	aa 27       	eor	r26, r26
    195c:	0e d0       	rcall	.+28     	; 0x197a <__addsf3x>
    195e:	1c c1       	rjmp	.+568    	; 0x1b98 <__fp_round>
    1960:	0d d1       	rcall	.+538    	; 0x1b7c <__fp_pscA>
    1962:	30 f0       	brcs	.+12     	; 0x1970 <__addsf3+0x18>
    1964:	12 d1       	rcall	.+548    	; 0x1b8a <__fp_pscB>
    1966:	20 f0       	brcs	.+8      	; 0x1970 <__addsf3+0x18>
    1968:	31 f4       	brne	.+12     	; 0x1976 <__addsf3+0x1e>
    196a:	9f 3f       	cpi	r25, 0xFF	; 255
    196c:	11 f4       	brne	.+4      	; 0x1972 <__addsf3+0x1a>
    196e:	1e f4       	brtc	.+6      	; 0x1976 <__addsf3+0x1e>
    1970:	02 c1       	rjmp	.+516    	; 0x1b76 <__fp_nan>
    1972:	0e f4       	brtc	.+2      	; 0x1976 <__addsf3+0x1e>
    1974:	e0 95       	com	r30
    1976:	e7 fb       	bst	r30, 7
    1978:	cf c0       	rjmp	.+414    	; 0x1b18 <__fp_inf>

0000197a <__addsf3x>:
    197a:	e9 2f       	mov	r30, r25
    197c:	1e d1       	rcall	.+572    	; 0x1bba <__fp_split3>
    197e:	80 f3       	brcs	.-32     	; 0x1960 <__addsf3+0x8>
    1980:	ba 17       	cp	r27, r26
    1982:	62 07       	cpc	r22, r18
    1984:	73 07       	cpc	r23, r19
    1986:	84 07       	cpc	r24, r20
    1988:	95 07       	cpc	r25, r21
    198a:	18 f0       	brcs	.+6      	; 0x1992 <__addsf3x+0x18>
    198c:	71 f4       	brne	.+28     	; 0x19aa <__addsf3x+0x30>
    198e:	9e f5       	brtc	.+102    	; 0x19f6 <__addsf3x+0x7c>
    1990:	4d c1       	rjmp	.+666    	; 0x1c2c <__fp_zero>
    1992:	0e f4       	brtc	.+2      	; 0x1996 <__addsf3x+0x1c>
    1994:	e0 95       	com	r30
    1996:	0b 2e       	mov	r0, r27
    1998:	ba 2f       	mov	r27, r26
    199a:	a0 2d       	mov	r26, r0
    199c:	0b 01       	movw	r0, r22
    199e:	b9 01       	movw	r22, r18
    19a0:	90 01       	movw	r18, r0
    19a2:	0c 01       	movw	r0, r24
    19a4:	ca 01       	movw	r24, r20
    19a6:	a0 01       	movw	r20, r0
    19a8:	11 24       	eor	r1, r1
    19aa:	ff 27       	eor	r31, r31
    19ac:	59 1b       	sub	r21, r25
    19ae:	99 f0       	breq	.+38     	; 0x19d6 <__addsf3x+0x5c>
    19b0:	59 3f       	cpi	r21, 0xF9	; 249
    19b2:	50 f4       	brcc	.+20     	; 0x19c8 <__addsf3x+0x4e>
    19b4:	50 3e       	cpi	r21, 0xE0	; 224
    19b6:	68 f1       	brcs	.+90     	; 0x1a12 <__addsf3x+0x98>
    19b8:	1a 16       	cp	r1, r26
    19ba:	f0 40       	sbci	r31, 0x00	; 0
    19bc:	a2 2f       	mov	r26, r18
    19be:	23 2f       	mov	r18, r19
    19c0:	34 2f       	mov	r19, r20
    19c2:	44 27       	eor	r20, r20
    19c4:	58 5f       	subi	r21, 0xF8	; 248
    19c6:	f3 cf       	rjmp	.-26     	; 0x19ae <__addsf3x+0x34>
    19c8:	46 95       	lsr	r20
    19ca:	37 95       	ror	r19
    19cc:	27 95       	ror	r18
    19ce:	a7 95       	ror	r26
    19d0:	f0 40       	sbci	r31, 0x00	; 0
    19d2:	53 95       	inc	r21
    19d4:	c9 f7       	brne	.-14     	; 0x19c8 <__addsf3x+0x4e>
    19d6:	7e f4       	brtc	.+30     	; 0x19f6 <__addsf3x+0x7c>
    19d8:	1f 16       	cp	r1, r31
    19da:	ba 0b       	sbc	r27, r26
    19dc:	62 0b       	sbc	r22, r18
    19de:	73 0b       	sbc	r23, r19
    19e0:	84 0b       	sbc	r24, r20
    19e2:	ba f0       	brmi	.+46     	; 0x1a12 <__addsf3x+0x98>
    19e4:	91 50       	subi	r25, 0x01	; 1
    19e6:	a1 f0       	breq	.+40     	; 0x1a10 <__addsf3x+0x96>
    19e8:	ff 0f       	add	r31, r31
    19ea:	bb 1f       	adc	r27, r27
    19ec:	66 1f       	adc	r22, r22
    19ee:	77 1f       	adc	r23, r23
    19f0:	88 1f       	adc	r24, r24
    19f2:	c2 f7       	brpl	.-16     	; 0x19e4 <__addsf3x+0x6a>
    19f4:	0e c0       	rjmp	.+28     	; 0x1a12 <__addsf3x+0x98>
    19f6:	ba 0f       	add	r27, r26
    19f8:	62 1f       	adc	r22, r18
    19fa:	73 1f       	adc	r23, r19
    19fc:	84 1f       	adc	r24, r20
    19fe:	48 f4       	brcc	.+18     	; 0x1a12 <__addsf3x+0x98>
    1a00:	87 95       	ror	r24
    1a02:	77 95       	ror	r23
    1a04:	67 95       	ror	r22
    1a06:	b7 95       	ror	r27
    1a08:	f7 95       	ror	r31
    1a0a:	9e 3f       	cpi	r25, 0xFE	; 254
    1a0c:	08 f0       	brcs	.+2      	; 0x1a10 <__addsf3x+0x96>
    1a0e:	b3 cf       	rjmp	.-154    	; 0x1976 <__addsf3+0x1e>
    1a10:	93 95       	inc	r25
    1a12:	88 0f       	add	r24, r24
    1a14:	08 f0       	brcs	.+2      	; 0x1a18 <__addsf3x+0x9e>
    1a16:	99 27       	eor	r25, r25
    1a18:	ee 0f       	add	r30, r30
    1a1a:	97 95       	ror	r25
    1a1c:	87 95       	ror	r24
    1a1e:	08 95       	ret

00001a20 <__fixunssfsi>:
    1a20:	d4 d0       	rcall	.+424    	; 0x1bca <__fp_splitA>
    1a22:	88 f0       	brcs	.+34     	; 0x1a46 <__fixunssfsi+0x26>
    1a24:	9f 57       	subi	r25, 0x7F	; 127
    1a26:	90 f0       	brcs	.+36     	; 0x1a4c <__fixunssfsi+0x2c>
    1a28:	b9 2f       	mov	r27, r25
    1a2a:	99 27       	eor	r25, r25
    1a2c:	b7 51       	subi	r27, 0x17	; 23
    1a2e:	a0 f0       	brcs	.+40     	; 0x1a58 <__fixunssfsi+0x38>
    1a30:	d1 f0       	breq	.+52     	; 0x1a66 <__fixunssfsi+0x46>
    1a32:	66 0f       	add	r22, r22
    1a34:	77 1f       	adc	r23, r23
    1a36:	88 1f       	adc	r24, r24
    1a38:	99 1f       	adc	r25, r25
    1a3a:	1a f0       	brmi	.+6      	; 0x1a42 <__fixunssfsi+0x22>
    1a3c:	ba 95       	dec	r27
    1a3e:	c9 f7       	brne	.-14     	; 0x1a32 <__fixunssfsi+0x12>
    1a40:	12 c0       	rjmp	.+36     	; 0x1a66 <__fixunssfsi+0x46>
    1a42:	b1 30       	cpi	r27, 0x01	; 1
    1a44:	81 f0       	breq	.+32     	; 0x1a66 <__fixunssfsi+0x46>
    1a46:	f2 d0       	rcall	.+484    	; 0x1c2c <__fp_zero>
    1a48:	b1 e0       	ldi	r27, 0x01	; 1
    1a4a:	08 95       	ret
    1a4c:	ef c0       	rjmp	.+478    	; 0x1c2c <__fp_zero>
    1a4e:	67 2f       	mov	r22, r23
    1a50:	78 2f       	mov	r23, r24
    1a52:	88 27       	eor	r24, r24
    1a54:	b8 5f       	subi	r27, 0xF8	; 248
    1a56:	39 f0       	breq	.+14     	; 0x1a66 <__fixunssfsi+0x46>
    1a58:	b9 3f       	cpi	r27, 0xF9	; 249
    1a5a:	cc f3       	brlt	.-14     	; 0x1a4e <__fixunssfsi+0x2e>
    1a5c:	86 95       	lsr	r24
    1a5e:	77 95       	ror	r23
    1a60:	67 95       	ror	r22
    1a62:	b3 95       	inc	r27
    1a64:	d9 f7       	brne	.-10     	; 0x1a5c <__fixunssfsi+0x3c>
    1a66:	3e f4       	brtc	.+14     	; 0x1a76 <__fixunssfsi+0x56>
    1a68:	90 95       	com	r25
    1a6a:	80 95       	com	r24
    1a6c:	70 95       	com	r23
    1a6e:	61 95       	neg	r22
    1a70:	7f 4f       	sbci	r23, 0xFF	; 255
    1a72:	8f 4f       	sbci	r24, 0xFF	; 255
    1a74:	9f 4f       	sbci	r25, 0xFF	; 255
    1a76:	08 95       	ret

00001a78 <__floatunsisf>:
    1a78:	e8 94       	clt
    1a7a:	09 c0       	rjmp	.+18     	; 0x1a8e <__floatsisf+0x12>

00001a7c <__floatsisf>:
    1a7c:	97 fb       	bst	r25, 7
    1a7e:	3e f4       	brtc	.+14     	; 0x1a8e <__floatsisf+0x12>
    1a80:	90 95       	com	r25
    1a82:	80 95       	com	r24
    1a84:	70 95       	com	r23
    1a86:	61 95       	neg	r22
    1a88:	7f 4f       	sbci	r23, 0xFF	; 255
    1a8a:	8f 4f       	sbci	r24, 0xFF	; 255
    1a8c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a8e:	99 23       	and	r25, r25
    1a90:	a9 f0       	breq	.+42     	; 0x1abc <__floatsisf+0x40>
    1a92:	f9 2f       	mov	r31, r25
    1a94:	96 e9       	ldi	r25, 0x96	; 150
    1a96:	bb 27       	eor	r27, r27
    1a98:	93 95       	inc	r25
    1a9a:	f6 95       	lsr	r31
    1a9c:	87 95       	ror	r24
    1a9e:	77 95       	ror	r23
    1aa0:	67 95       	ror	r22
    1aa2:	b7 95       	ror	r27
    1aa4:	f1 11       	cpse	r31, r1
    1aa6:	f8 cf       	rjmp	.-16     	; 0x1a98 <__floatsisf+0x1c>
    1aa8:	fa f4       	brpl	.+62     	; 0x1ae8 <__floatsisf+0x6c>
    1aaa:	bb 0f       	add	r27, r27
    1aac:	11 f4       	brne	.+4      	; 0x1ab2 <__floatsisf+0x36>
    1aae:	60 ff       	sbrs	r22, 0
    1ab0:	1b c0       	rjmp	.+54     	; 0x1ae8 <__floatsisf+0x6c>
    1ab2:	6f 5f       	subi	r22, 0xFF	; 255
    1ab4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ab6:	8f 4f       	sbci	r24, 0xFF	; 255
    1ab8:	9f 4f       	sbci	r25, 0xFF	; 255
    1aba:	16 c0       	rjmp	.+44     	; 0x1ae8 <__floatsisf+0x6c>
    1abc:	88 23       	and	r24, r24
    1abe:	11 f0       	breq	.+4      	; 0x1ac4 <__floatsisf+0x48>
    1ac0:	96 e9       	ldi	r25, 0x96	; 150
    1ac2:	11 c0       	rjmp	.+34     	; 0x1ae6 <__floatsisf+0x6a>
    1ac4:	77 23       	and	r23, r23
    1ac6:	21 f0       	breq	.+8      	; 0x1ad0 <__floatsisf+0x54>
    1ac8:	9e e8       	ldi	r25, 0x8E	; 142
    1aca:	87 2f       	mov	r24, r23
    1acc:	76 2f       	mov	r23, r22
    1ace:	05 c0       	rjmp	.+10     	; 0x1ada <__floatsisf+0x5e>
    1ad0:	66 23       	and	r22, r22
    1ad2:	71 f0       	breq	.+28     	; 0x1af0 <__floatsisf+0x74>
    1ad4:	96 e8       	ldi	r25, 0x86	; 134
    1ad6:	86 2f       	mov	r24, r22
    1ad8:	70 e0       	ldi	r23, 0x00	; 0
    1ada:	60 e0       	ldi	r22, 0x00	; 0
    1adc:	2a f0       	brmi	.+10     	; 0x1ae8 <__floatsisf+0x6c>
    1ade:	9a 95       	dec	r25
    1ae0:	66 0f       	add	r22, r22
    1ae2:	77 1f       	adc	r23, r23
    1ae4:	88 1f       	adc	r24, r24
    1ae6:	da f7       	brpl	.-10     	; 0x1ade <__floatsisf+0x62>
    1ae8:	88 0f       	add	r24, r24
    1aea:	96 95       	lsr	r25
    1aec:	87 95       	ror	r24
    1aee:	97 f9       	bld	r25, 7
    1af0:	08 95       	ret

00001af2 <floor>:
    1af2:	85 d0       	rcall	.+266    	; 0x1bfe <__fp_trunc>
    1af4:	80 f0       	brcs	.+32     	; 0x1b16 <floor+0x24>
    1af6:	9f 37       	cpi	r25, 0x7F	; 127
    1af8:	40 f4       	brcc	.+16     	; 0x1b0a <floor+0x18>
    1afa:	91 11       	cpse	r25, r1
    1afc:	0e f0       	brts	.+2      	; 0x1b00 <floor+0xe>
    1afe:	97 c0       	rjmp	.+302    	; 0x1c2e <__fp_szero>
    1b00:	60 e0       	ldi	r22, 0x00	; 0
    1b02:	70 e0       	ldi	r23, 0x00	; 0
    1b04:	80 e8       	ldi	r24, 0x80	; 128
    1b06:	9f eb       	ldi	r25, 0xBF	; 191
    1b08:	08 95       	ret
    1b0a:	26 f4       	brtc	.+8      	; 0x1b14 <floor+0x22>
    1b0c:	1b 16       	cp	r1, r27
    1b0e:	61 1d       	adc	r22, r1
    1b10:	71 1d       	adc	r23, r1
    1b12:	81 1d       	adc	r24, r1
    1b14:	07 c0       	rjmp	.+14     	; 0x1b24 <__fp_mintl>
    1b16:	21 c0       	rjmp	.+66     	; 0x1b5a <__fp_mpack>

00001b18 <__fp_inf>:
    1b18:	97 f9       	bld	r25, 7
    1b1a:	9f 67       	ori	r25, 0x7F	; 127
    1b1c:	80 e8       	ldi	r24, 0x80	; 128
    1b1e:	70 e0       	ldi	r23, 0x00	; 0
    1b20:	60 e0       	ldi	r22, 0x00	; 0
    1b22:	08 95       	ret

00001b24 <__fp_mintl>:
    1b24:	88 23       	and	r24, r24
    1b26:	71 f4       	brne	.+28     	; 0x1b44 <__fp_mintl+0x20>
    1b28:	77 23       	and	r23, r23
    1b2a:	21 f0       	breq	.+8      	; 0x1b34 <__fp_mintl+0x10>
    1b2c:	98 50       	subi	r25, 0x08	; 8
    1b2e:	87 2b       	or	r24, r23
    1b30:	76 2f       	mov	r23, r22
    1b32:	07 c0       	rjmp	.+14     	; 0x1b42 <__fp_mintl+0x1e>
    1b34:	66 23       	and	r22, r22
    1b36:	11 f4       	brne	.+4      	; 0x1b3c <__fp_mintl+0x18>
    1b38:	99 27       	eor	r25, r25
    1b3a:	0d c0       	rjmp	.+26     	; 0x1b56 <__fp_mintl+0x32>
    1b3c:	90 51       	subi	r25, 0x10	; 16
    1b3e:	86 2b       	or	r24, r22
    1b40:	70 e0       	ldi	r23, 0x00	; 0
    1b42:	60 e0       	ldi	r22, 0x00	; 0
    1b44:	2a f0       	brmi	.+10     	; 0x1b50 <__fp_mintl+0x2c>
    1b46:	9a 95       	dec	r25
    1b48:	66 0f       	add	r22, r22
    1b4a:	77 1f       	adc	r23, r23
    1b4c:	88 1f       	adc	r24, r24
    1b4e:	da f7       	brpl	.-10     	; 0x1b46 <__fp_mintl+0x22>
    1b50:	88 0f       	add	r24, r24
    1b52:	96 95       	lsr	r25
    1b54:	87 95       	ror	r24
    1b56:	97 f9       	bld	r25, 7
    1b58:	08 95       	ret

00001b5a <__fp_mpack>:
    1b5a:	9f 3f       	cpi	r25, 0xFF	; 255
    1b5c:	31 f0       	breq	.+12     	; 0x1b6a <__fp_mpack_finite+0xc>

00001b5e <__fp_mpack_finite>:
    1b5e:	91 50       	subi	r25, 0x01	; 1
    1b60:	20 f4       	brcc	.+8      	; 0x1b6a <__fp_mpack_finite+0xc>
    1b62:	87 95       	ror	r24
    1b64:	77 95       	ror	r23
    1b66:	67 95       	ror	r22
    1b68:	b7 95       	ror	r27
    1b6a:	88 0f       	add	r24, r24
    1b6c:	91 1d       	adc	r25, r1
    1b6e:	96 95       	lsr	r25
    1b70:	87 95       	ror	r24
    1b72:	97 f9       	bld	r25, 7
    1b74:	08 95       	ret

00001b76 <__fp_nan>:
    1b76:	9f ef       	ldi	r25, 0xFF	; 255
    1b78:	80 ec       	ldi	r24, 0xC0	; 192
    1b7a:	08 95       	ret

00001b7c <__fp_pscA>:
    1b7c:	00 24       	eor	r0, r0
    1b7e:	0a 94       	dec	r0
    1b80:	16 16       	cp	r1, r22
    1b82:	17 06       	cpc	r1, r23
    1b84:	18 06       	cpc	r1, r24
    1b86:	09 06       	cpc	r0, r25
    1b88:	08 95       	ret

00001b8a <__fp_pscB>:
    1b8a:	00 24       	eor	r0, r0
    1b8c:	0a 94       	dec	r0
    1b8e:	12 16       	cp	r1, r18
    1b90:	13 06       	cpc	r1, r19
    1b92:	14 06       	cpc	r1, r20
    1b94:	05 06       	cpc	r0, r21
    1b96:	08 95       	ret

00001b98 <__fp_round>:
    1b98:	09 2e       	mov	r0, r25
    1b9a:	03 94       	inc	r0
    1b9c:	00 0c       	add	r0, r0
    1b9e:	11 f4       	brne	.+4      	; 0x1ba4 <__fp_round+0xc>
    1ba0:	88 23       	and	r24, r24
    1ba2:	52 f0       	brmi	.+20     	; 0x1bb8 <__fp_round+0x20>
    1ba4:	bb 0f       	add	r27, r27
    1ba6:	40 f4       	brcc	.+16     	; 0x1bb8 <__fp_round+0x20>
    1ba8:	bf 2b       	or	r27, r31
    1baa:	11 f4       	brne	.+4      	; 0x1bb0 <__fp_round+0x18>
    1bac:	60 ff       	sbrs	r22, 0
    1bae:	04 c0       	rjmp	.+8      	; 0x1bb8 <__fp_round+0x20>
    1bb0:	6f 5f       	subi	r22, 0xFF	; 255
    1bb2:	7f 4f       	sbci	r23, 0xFF	; 255
    1bb4:	8f 4f       	sbci	r24, 0xFF	; 255
    1bb6:	9f 4f       	sbci	r25, 0xFF	; 255
    1bb8:	08 95       	ret

00001bba <__fp_split3>:
    1bba:	57 fd       	sbrc	r21, 7
    1bbc:	90 58       	subi	r25, 0x80	; 128
    1bbe:	44 0f       	add	r20, r20
    1bc0:	55 1f       	adc	r21, r21
    1bc2:	59 f0       	breq	.+22     	; 0x1bda <__fp_splitA+0x10>
    1bc4:	5f 3f       	cpi	r21, 0xFF	; 255
    1bc6:	71 f0       	breq	.+28     	; 0x1be4 <__fp_splitA+0x1a>
    1bc8:	47 95       	ror	r20

00001bca <__fp_splitA>:
    1bca:	88 0f       	add	r24, r24
    1bcc:	97 fb       	bst	r25, 7
    1bce:	99 1f       	adc	r25, r25
    1bd0:	61 f0       	breq	.+24     	; 0x1bea <__fp_splitA+0x20>
    1bd2:	9f 3f       	cpi	r25, 0xFF	; 255
    1bd4:	79 f0       	breq	.+30     	; 0x1bf4 <__fp_splitA+0x2a>
    1bd6:	87 95       	ror	r24
    1bd8:	08 95       	ret
    1bda:	12 16       	cp	r1, r18
    1bdc:	13 06       	cpc	r1, r19
    1bde:	14 06       	cpc	r1, r20
    1be0:	55 1f       	adc	r21, r21
    1be2:	f2 cf       	rjmp	.-28     	; 0x1bc8 <__fp_split3+0xe>
    1be4:	46 95       	lsr	r20
    1be6:	f1 df       	rcall	.-30     	; 0x1bca <__fp_splitA>
    1be8:	08 c0       	rjmp	.+16     	; 0x1bfa <__fp_splitA+0x30>
    1bea:	16 16       	cp	r1, r22
    1bec:	17 06       	cpc	r1, r23
    1bee:	18 06       	cpc	r1, r24
    1bf0:	99 1f       	adc	r25, r25
    1bf2:	f1 cf       	rjmp	.-30     	; 0x1bd6 <__fp_splitA+0xc>
    1bf4:	86 95       	lsr	r24
    1bf6:	71 05       	cpc	r23, r1
    1bf8:	61 05       	cpc	r22, r1
    1bfa:	08 94       	sec
    1bfc:	08 95       	ret

00001bfe <__fp_trunc>:
    1bfe:	e5 df       	rcall	.-54     	; 0x1bca <__fp_splitA>
    1c00:	a0 f0       	brcs	.+40     	; 0x1c2a <__fp_trunc+0x2c>
    1c02:	be e7       	ldi	r27, 0x7E	; 126
    1c04:	b9 17       	cp	r27, r25
    1c06:	88 f4       	brcc	.+34     	; 0x1c2a <__fp_trunc+0x2c>
    1c08:	bb 27       	eor	r27, r27
    1c0a:	9f 38       	cpi	r25, 0x8F	; 143
    1c0c:	60 f4       	brcc	.+24     	; 0x1c26 <__fp_trunc+0x28>
    1c0e:	16 16       	cp	r1, r22
    1c10:	b1 1d       	adc	r27, r1
    1c12:	67 2f       	mov	r22, r23
    1c14:	78 2f       	mov	r23, r24
    1c16:	88 27       	eor	r24, r24
    1c18:	98 5f       	subi	r25, 0xF8	; 248
    1c1a:	f7 cf       	rjmp	.-18     	; 0x1c0a <__fp_trunc+0xc>
    1c1c:	86 95       	lsr	r24
    1c1e:	77 95       	ror	r23
    1c20:	67 95       	ror	r22
    1c22:	b1 1d       	adc	r27, r1
    1c24:	93 95       	inc	r25
    1c26:	96 39       	cpi	r25, 0x96	; 150
    1c28:	c8 f3       	brcs	.-14     	; 0x1c1c <__fp_trunc+0x1e>
    1c2a:	08 95       	ret

00001c2c <__fp_zero>:
    1c2c:	e8 94       	clt

00001c2e <__fp_szero>:
    1c2e:	bb 27       	eor	r27, r27
    1c30:	66 27       	eor	r22, r22
    1c32:	77 27       	eor	r23, r23
    1c34:	cb 01       	movw	r24, r22
    1c36:	97 f9       	bld	r25, 7
    1c38:	08 95       	ret

00001c3a <__mulsf3>:
    1c3a:	0b d0       	rcall	.+22     	; 0x1c52 <__mulsf3x>
    1c3c:	ad cf       	rjmp	.-166    	; 0x1b98 <__fp_round>
    1c3e:	9e df       	rcall	.-196    	; 0x1b7c <__fp_pscA>
    1c40:	28 f0       	brcs	.+10     	; 0x1c4c <__mulsf3+0x12>
    1c42:	a3 df       	rcall	.-186    	; 0x1b8a <__fp_pscB>
    1c44:	18 f0       	brcs	.+6      	; 0x1c4c <__mulsf3+0x12>
    1c46:	95 23       	and	r25, r21
    1c48:	09 f0       	breq	.+2      	; 0x1c4c <__mulsf3+0x12>
    1c4a:	66 cf       	rjmp	.-308    	; 0x1b18 <__fp_inf>
    1c4c:	94 cf       	rjmp	.-216    	; 0x1b76 <__fp_nan>
    1c4e:	11 24       	eor	r1, r1
    1c50:	ee cf       	rjmp	.-36     	; 0x1c2e <__fp_szero>

00001c52 <__mulsf3x>:
    1c52:	b3 df       	rcall	.-154    	; 0x1bba <__fp_split3>
    1c54:	a0 f3       	brcs	.-24     	; 0x1c3e <__mulsf3+0x4>

00001c56 <__mulsf3_pse>:
    1c56:	95 9f       	mul	r25, r21
    1c58:	d1 f3       	breq	.-12     	; 0x1c4e <__mulsf3+0x14>
    1c5a:	95 0f       	add	r25, r21
    1c5c:	50 e0       	ldi	r21, 0x00	; 0
    1c5e:	55 1f       	adc	r21, r21
    1c60:	62 9f       	mul	r22, r18
    1c62:	f0 01       	movw	r30, r0
    1c64:	72 9f       	mul	r23, r18
    1c66:	bb 27       	eor	r27, r27
    1c68:	f0 0d       	add	r31, r0
    1c6a:	b1 1d       	adc	r27, r1
    1c6c:	63 9f       	mul	r22, r19
    1c6e:	aa 27       	eor	r26, r26
    1c70:	f0 0d       	add	r31, r0
    1c72:	b1 1d       	adc	r27, r1
    1c74:	aa 1f       	adc	r26, r26
    1c76:	64 9f       	mul	r22, r20
    1c78:	66 27       	eor	r22, r22
    1c7a:	b0 0d       	add	r27, r0
    1c7c:	a1 1d       	adc	r26, r1
    1c7e:	66 1f       	adc	r22, r22
    1c80:	82 9f       	mul	r24, r18
    1c82:	22 27       	eor	r18, r18
    1c84:	b0 0d       	add	r27, r0
    1c86:	a1 1d       	adc	r26, r1
    1c88:	62 1f       	adc	r22, r18
    1c8a:	73 9f       	mul	r23, r19
    1c8c:	b0 0d       	add	r27, r0
    1c8e:	a1 1d       	adc	r26, r1
    1c90:	62 1f       	adc	r22, r18
    1c92:	83 9f       	mul	r24, r19
    1c94:	a0 0d       	add	r26, r0
    1c96:	61 1d       	adc	r22, r1
    1c98:	22 1f       	adc	r18, r18
    1c9a:	74 9f       	mul	r23, r20
    1c9c:	33 27       	eor	r19, r19
    1c9e:	a0 0d       	add	r26, r0
    1ca0:	61 1d       	adc	r22, r1
    1ca2:	23 1f       	adc	r18, r19
    1ca4:	84 9f       	mul	r24, r20
    1ca6:	60 0d       	add	r22, r0
    1ca8:	21 1d       	adc	r18, r1
    1caa:	82 2f       	mov	r24, r18
    1cac:	76 2f       	mov	r23, r22
    1cae:	6a 2f       	mov	r22, r26
    1cb0:	11 24       	eor	r1, r1
    1cb2:	9f 57       	subi	r25, 0x7F	; 127
    1cb4:	50 40       	sbci	r21, 0x00	; 0
    1cb6:	8a f0       	brmi	.+34     	; 0x1cda <__mulsf3_pse+0x84>
    1cb8:	e1 f0       	breq	.+56     	; 0x1cf2 <__mulsf3_pse+0x9c>
    1cba:	88 23       	and	r24, r24
    1cbc:	4a f0       	brmi	.+18     	; 0x1cd0 <__mulsf3_pse+0x7a>
    1cbe:	ee 0f       	add	r30, r30
    1cc0:	ff 1f       	adc	r31, r31
    1cc2:	bb 1f       	adc	r27, r27
    1cc4:	66 1f       	adc	r22, r22
    1cc6:	77 1f       	adc	r23, r23
    1cc8:	88 1f       	adc	r24, r24
    1cca:	91 50       	subi	r25, 0x01	; 1
    1ccc:	50 40       	sbci	r21, 0x00	; 0
    1cce:	a9 f7       	brne	.-22     	; 0x1cba <__mulsf3_pse+0x64>
    1cd0:	9e 3f       	cpi	r25, 0xFE	; 254
    1cd2:	51 05       	cpc	r21, r1
    1cd4:	70 f0       	brcs	.+28     	; 0x1cf2 <__mulsf3_pse+0x9c>
    1cd6:	20 cf       	rjmp	.-448    	; 0x1b18 <__fp_inf>
    1cd8:	aa cf       	rjmp	.-172    	; 0x1c2e <__fp_szero>
    1cda:	5f 3f       	cpi	r21, 0xFF	; 255
    1cdc:	ec f3       	brlt	.-6      	; 0x1cd8 <__mulsf3_pse+0x82>
    1cde:	98 3e       	cpi	r25, 0xE8	; 232
    1ce0:	dc f3       	brlt	.-10     	; 0x1cd8 <__mulsf3_pse+0x82>
    1ce2:	86 95       	lsr	r24
    1ce4:	77 95       	ror	r23
    1ce6:	67 95       	ror	r22
    1ce8:	b7 95       	ror	r27
    1cea:	f7 95       	ror	r31
    1cec:	e7 95       	ror	r30
    1cee:	9f 5f       	subi	r25, 0xFF	; 255
    1cf0:	c1 f7       	brne	.-16     	; 0x1ce2 <__mulsf3_pse+0x8c>
    1cf2:	fe 2b       	or	r31, r30
    1cf4:	88 0f       	add	r24, r24
    1cf6:	91 1d       	adc	r25, r1
    1cf8:	96 95       	lsr	r25
    1cfa:	87 95       	ror	r24
    1cfc:	97 f9       	bld	r25, 7
    1cfe:	08 95       	ret

00001d00 <__tablejump2__>:
    1d00:	ee 0f       	add	r30, r30
    1d02:	ff 1f       	adc	r31, r31
    1d04:	00 24       	eor	r0, r0
    1d06:	00 1c       	adc	r0, r0
    1d08:	0b be       	out	0x3b, r0	; 59
    1d0a:	07 90       	elpm	r0, Z+
    1d0c:	f6 91       	elpm	r31, Z
    1d0e:	e0 2d       	mov	r30, r0
    1d10:	09 94       	ijmp

00001d12 <__umulhisi3>:
    1d12:	a2 9f       	mul	r26, r18
    1d14:	b0 01       	movw	r22, r0
    1d16:	b3 9f       	mul	r27, r19
    1d18:	c0 01       	movw	r24, r0
    1d1a:	a3 9f       	mul	r26, r19
    1d1c:	70 0d       	add	r23, r0
    1d1e:	81 1d       	adc	r24, r1
    1d20:	11 24       	eor	r1, r1
    1d22:	91 1d       	adc	r25, r1
    1d24:	b2 9f       	mul	r27, r18
    1d26:	70 0d       	add	r23, r0
    1d28:	81 1d       	adc	r24, r1
    1d2a:	11 24       	eor	r1, r1
    1d2c:	91 1d       	adc	r25, r1
    1d2e:	08 95       	ret

00001d30 <eeprom_read_byte>:
    1d30:	f9 99       	sbic	0x1f, 1	; 31
    1d32:	fe cf       	rjmp	.-4      	; 0x1d30 <eeprom_read_byte>
    1d34:	92 bd       	out	0x22, r25	; 34
    1d36:	81 bd       	out	0x21, r24	; 33
    1d38:	f8 9a       	sbi	0x1f, 0	; 31
    1d3a:	99 27       	eor	r25, r25
    1d3c:	80 b5       	in	r24, 0x20	; 32
    1d3e:	08 95       	ret

00001d40 <eeprom_read_word>:
    1d40:	a8 e1       	ldi	r26, 0x18	; 24
    1d42:	b0 e0       	ldi	r27, 0x00	; 0
    1d44:	42 e0       	ldi	r20, 0x02	; 2
    1d46:	50 e0       	ldi	r21, 0x00	; 0
    1d48:	13 c0       	rjmp	.+38     	; 0x1d70 <eeprom_read_blraw>

00001d4a <eeprom_write_byte>:
    1d4a:	26 2f       	mov	r18, r22

00001d4c <eeprom_write_r18>:
    1d4c:	f9 99       	sbic	0x1f, 1	; 31
    1d4e:	fe cf       	rjmp	.-4      	; 0x1d4c <eeprom_write_r18>
    1d50:	1f ba       	out	0x1f, r1	; 31
    1d52:	92 bd       	out	0x22, r25	; 34
    1d54:	81 bd       	out	0x21, r24	; 33
    1d56:	20 bd       	out	0x20, r18	; 32
    1d58:	0f b6       	in	r0, 0x3f	; 63
    1d5a:	f8 94       	cli
    1d5c:	fa 9a       	sbi	0x1f, 2	; 31
    1d5e:	f9 9a       	sbi	0x1f, 1	; 31
    1d60:	0f be       	out	0x3f, r0	; 63
    1d62:	01 96       	adiw	r24, 0x01	; 1
    1d64:	08 95       	ret

00001d66 <eeprom_write_word>:
    1d66:	f1 df       	rcall	.-30     	; 0x1d4a <eeprom_write_byte>
    1d68:	27 2f       	mov	r18, r23
    1d6a:	f0 cf       	rjmp	.-32     	; 0x1d4c <eeprom_write_r18>

00001d6c <eeprom_read_block>:
    1d6c:	dc 01       	movw	r26, r24
    1d6e:	cb 01       	movw	r24, r22

00001d70 <eeprom_read_blraw>:
    1d70:	fc 01       	movw	r30, r24
    1d72:	f9 99       	sbic	0x1f, 1	; 31
    1d74:	fe cf       	rjmp	.-4      	; 0x1d72 <eeprom_read_blraw+0x2>
    1d76:	06 c0       	rjmp	.+12     	; 0x1d84 <eeprom_read_blraw+0x14>
    1d78:	f2 bd       	out	0x22, r31	; 34
    1d7a:	e1 bd       	out	0x21, r30	; 33
    1d7c:	f8 9a       	sbi	0x1f, 0	; 31
    1d7e:	31 96       	adiw	r30, 0x01	; 1
    1d80:	00 b4       	in	r0, 0x20	; 32
    1d82:	0d 92       	st	X+, r0
    1d84:	41 50       	subi	r20, 0x01	; 1
    1d86:	50 40       	sbci	r21, 0x00	; 0
    1d88:	b8 f7       	brcc	.-18     	; 0x1d78 <eeprom_read_blraw+0x8>
    1d8a:	08 95       	ret

00001d8c <_exit>:
    1d8c:	f8 94       	cli

00001d8e <__stop_program>:
    1d8e:	ff cf       	rjmp	.-2      	; 0x1d8e <__stop_program>
